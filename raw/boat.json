[	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.InputProcessor;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\n/**\n * Created by alexandercamenzind on 30/05/16.\n */\npublic class CustomInputProcessor implements InputProcessor {\n    Player player;\n    OrthographicCamera cam;\n\n    public CustomInputProcessor(Player player, OrthographicCamera cam){\n        this.player = player;\n        this.cam = cam;\n\n\n    }\n    @Override\n    public boolean keyDown(int keycode) {\n        return false;\n    }\n\n    @Override\n    public boolean keyUp(int keycode) {\n        return false;\n    }\n\n    @Override\n    public boolean keyTyped(char character) {\n        return false;\n    }\n\n    @Override\n    public boolean touchDown(int screenX, int screenY, int pointer, int button) {\n        boolean res;\n        res = player.getPorts().handlePortInputBoolean(cam);\n        return res;\n    }\n\n    @Override\n    public boolean touchUp(int screenX, int screenY, int pointer, int button) {\n        return false;\n    }\n\n    @Override\n    public boolean touchDragged(int screenX, int screenY, int pointer) {\n        return false;\n    }\n\n    @Override\n    public boolean mouseMoved(int screenX, int screenY) {\n        return false;\n    }\n\n    @Override\n    public boolean scrolled(int amount) {\n        return false;\n    }\n}\n",		"name" : "CustomInputProcessor",		"relations" : [			"CustomInputProcessor",			"Ports",			"Player",			"Port"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.maps.tiled.TiledMap;\nimport com.badlogic.gdx.maps.tiled.TmxMapLoader;\nimport com.sun.org.apache.bcel.internal.generic.NEW;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\nimport ch.inf.usi.pf2.project.mapObjects.Article;\n/**\n * Created by simonreding on 29/05/16.\n */\npublic class ArticleMaker {\n    private ArrayList<String> regions;\n    private ArrayList<String> countries;\n    private ArrayList<Disaster> disasters;\n\n    public ArticleMaker(ArrayList<String> regions, ArrayList<Disaster> disasters){\n        this.countries = News.portNames();\n        this.disasters = disasters;\n        this.regions = regions;\n    }\n\n\n    public static String firstArticleText(int gravity){\n        ArrayList<String> textList = new ArrayList<String>();\n        textList.add(\" that wreaked havoc in \");\n        textList.add(\" caused problems in \");\n        textList.add(\" destroyed lives \");\n        textList.add(\" destabilized \");\n        textList.add(\" haunt \");\n        textList.add(\" caused serious damage to property in \");\n        textList.add(\" sank ships in \");\n        textList.add(\" caused fires in \");\n        textList.add(\" encouraged looters in \");\n        textList.add(\" created chaos in \");\n        return textList.get(gravity);\n    }\n\n\n    public static String seaDisaster(){\n        Random rn = new Random();\n        ArrayList<String> disasterList = new ArrayList<String>();\n        disasterList.add(\"Tsunami\");\n        disasterList.add(\"Pirates\");\n        disasterList.add(\"Typhoon\");\n        disasterList.add(\"Hurricane\");\n        disasterList.add(\"Storm\");\n        disasterList.add(\"Escalating military tensions\");\n        disasterList.add(\"War\");\n        return disasterList.get(rn.nextInt(disasterList.size()));\n    }\n    public static String landDisaster(){\n        Random rn = new Random();\n        ArrayList<String> disasterList = new ArrayList<String>();\n        disasterList.add(\"Earthquake\");\n        disasterList.add(\"Coup d'etat\");\n        disasterList.add(\"Typhoon\");\n        disasterList.add(\"Hurricane\");\n        disasterList.add(\"Storm\");\n        disasterList.add(\"War\");\n        disasterList.add(\"Corrupt Government\");\n        return disasterList.get(rn.nextInt(disasterList.size()));\n    }\n\n\n}\n",		"name" : "ArticleMaker",		"relations" : [			"ArticleMaker",			"Article",			"Map",			"News",			"Disaster"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.maps.objects.PolygonMapObject;\nimport com.badlogic.gdx.math.Intersector;\nimport com.badlogic.gdx.math.Polygon;\nimport com.badlogic.gdx.math.Vector2;\n\nimport java.util.ArrayList;\n\n/**\n * Created by alexandercamenzind on 22/05/16.\n */\npublic class Line {\n    private Vector2 start;\n    public int startQuadrant;\n    private Vector2 end;\n    public int endQuadrant;\n    private double length;\n    private Vector2 direction;\n    private float angle;\n    private boolean addedTwo;\n\n    public Line(Vector2 start, Vector2 end, int startQuadrant,int endQuadrant){\n        this.start = start;\n        this.end =end;\n        double dx =   end.x-start.x;\n        double dy =   end.y-start.y;\n        length = Math.sqrt(dx*dx+dy*dy);\n        direction = new Vector2((float) (dx/length),(float) (dy/length));\n        angle = direction.angle();\n        this.startQuadrant=startQuadrant;\n        this.endQuadrant=endQuadrant;\n        this.addedTwo=false;\n\n    }\n\n    public Vector2 getEnd(){\n        return  end;\n    }\n    public Vector2 getStart(){ return start;}\n\n    public void draw(ShapeRenderer shapeRenderer){\n        shapeRenderer.rectLine(start.x, start.y, end.x, end.y, 5);\n    }\n\n    public Line leftToRight(int c){\n        return new Line(new Vector2(start.x+c,start.y), new Vector2(end.x+c,end.y),0,0);\n    }\n\n    public double getLength() {\n        return length;\n    }\n\n    public Vector2 getDirection() {\n        return direction;\n    }\n\n\n    //returns true if the line intersects any of the land\n    public boolean intersectsWithPolygons(MapObjects polys){\n        boolean res =false;\n        for(MapObject o:polys){\n            if(o instanceof PolygonMapObject){\n                Polygon p = ((PolygonMapObject) o).getPolygon();\n                if(Intersector.intersectSegmentPolygon(start,end,p)){\n                    res =true;\n                }\n            }\n        }\n        return res;\n    }\n\n    public int computeQ(int position){\n        double alpha = Math.atan((double) ((end.y-start.y)/(end.x-start.x)));\n        return (int) (((position - start.x ) * Math.tan(alpha))+start.y);\n    }\n\n\n    public void swqpQuadrants(){\n        if(startQuadrant>=2){\n            startQuadrant-=2;\n        }\n        else{\n            startQuadrant+=2;\n        }\n        if(endQuadrant>=2){\n            endQuadrant-=2;\n        }\n        else {\n            endQuadrant+=2;\n        }\n    }\n\n    public boolean addedTwo(){\n        return addedTwo;\n    }\n\n    //c should be 1/4 of the worldwidth\n    public void addLine(ArrayList<Line> list, int c){\n        int sq = startQuadrant;\n        int eq = endQuadrant;\n\n        Line v1;\n        Line v2;\n        if(sq< 2 && eq<2){\n            list.add(this);\n\n        }\n        else if(sq >=2 && eq >= 2){\n            list.add(new Line(new Vector2(start.x,start.y),new Vector2(end.x-2*c,end.y),sq,eq));\n\n        }\n        else if(sq<2 && eq>=2){\n            int q = computeQ(2*c);\n            v1 = new Line(start, new Vector2(2*c,q), sq,eq);\n            v2 = new Line(new Vector2(0,q), new Vector2(end.x-2*c, end.y),sq,eq);\n            v2.addedTwo = true;\n            list.add(v1);\n            list.add(v2);\n\n        }\n        else if(sq>=2 && eq<2){\n            v1 = new Line(new Vector2(start.x+2*c,start.y),end,0,0);\n            int q = v1.computeQ(2*c);\n            v1 = new Line(start,new Vector2(0,q),sq,sq);\n            v2 = new Line(new Vector2(2*c,q),end,eq,eq);\n            v2.addedTwo=true;\n            list.add(v1);\n            list.add(v2);\n        }\n\n\n    }\n\n\n}\n",		"name" : "Line",		"relations" : [			"Line",			"Map"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\n\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\n\n\n/**\n * Created by simonreding on 23/05/16.\n */\n\npublic class Article {\n    private String title;\n    private String content;\n    private TxtButton textButton;\n    private Skin skin;\n\n\n    public Article(String title,String content,int n){\n        this.title = title;\n        this.content = content;\n        skin = new Skin(Gdx.files.internal(\"uiskin.json\"));\n        textButton = new TxtButton(title,skin,n);\n    }\n\n    public String getContent() {\n        return content;\n    }\n    public TxtButton getTextButton(){return textButton;}\n\n    public String getTitle() {\n        return title;\n    }\n}\n",		"name" : "Article",		"relations" : [			"Article",			"Button",			"TxtButton"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.maps.objects.EllipseMapObject;\nimport com.badlogic.gdx.maps.objects.RectangleMapObject;\nimport com.badlogic.gdx.math.Ellipse;\nimport com.badlogic.gdx.math.Rectangle;\nimport com.badlogic.gdx.math.Vector3;\n\nimport java.util.ArrayList;\n\n/**\n * Created by alexandercamenzind on 17/05/16.\n */\npublic class Ports {\n    //private MapObjects ports;\n\n    private int WORLD_WIDTH;\n    private ArrayList<Port> ports;\n    private Sprite portSymbol;\n\n    public Ports(MapObjects ports, int WORLD_WIDTH){\n\n        this.ports =new ArrayList<Port>();\n        addPorts(ports);\n        this.WORLD_WIDTH = WORLD_WIDTH;\n        this.portSymbol= new Sprite(new Texture(\"portIcon.png\"));\n        portSymbol.setAlpha(1f);\n    }\n\n    public Port portTouched (OrthographicCamera cam){\n        int x = Gdx.input.getX();\n        int y = Gdx.input.getY();\n        Vector3 v = cam.unproject(new Vector3(x,y,0));\n        //v.y = (WORLD_HEIGHT - v.y);\n        Port res = null;\n        for(Port p: ports) {\n            Rectangle r = p.getHitBox();\n\n            if (r.getX() < v.x && v.x < r.getX() + r.getWidth() &&\n                    r.getY() < v.y && v.y < r.getY() + r.getHeight()) {\n                res = p;\n            } else if (r.getX() < v.x - WORLD_WIDTH / 2 && v.x - WORLD_WIDTH / 2 < r.getX() + r.getWidth() &&\n                    r.getY() < v.y && v.y < r.getY() + r.getHeight()) {\n                res = p;\n            }\n        }\n\n        return res;\n        }\n\n    public Port handlePortInput(OrthographicCamera cam){\n        Port p = portTouched(cam);\n        if(Gdx.input.justTouched()&& p != null){\n            System.out.println(\"pls display options for port: \" + p.getName());\n        }\n        return p;\n    }\n\n    public boolean handlePortInputBoolean(OrthographicCamera cam){\n        Port p = portTouched(cam);\n        if(Gdx.input.justTouched()&& p != null){\n            return true;\n        }\n        return false;\n    }\n\n    public void addPorts(MapObjects mO){\n        for(MapObject o:mO){\n            if(o instanceof RectangleMapObject){\n                RectangleMapObject rec =  (RectangleMapObject) o;\n                Rectangle r = rec.getRectangle();\n                Port port = new Port(rec.getName(),r);\n                ports.add(port);\n            }\n        }\n    }\n\n    public void drawPorts(SpriteBatch batch){\n        for(Port p: ports){\n            p.drawPort(batch,portSymbol, WORLD_WIDTH);\n        }\n\n    }\n\n    public ArrayList<Port> getPorts() {\n        return ports;\n    }\n}\n",		"name" : "Ports",		"relations" : [			"Ports",			"Map",			"Port"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.g2d.Batch;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.math.Matrix4;\n\n/**\n * Created by alexandercamenzind on 10/05/16.\n */\npublic class Button {\n\n    private float x;\n    private float y;\n    private int width;\n    private int height;\n    private Sprite buttonImg;\n    private Sprite buttonImg2;\n    private int whatTodDisplay;\n\n    // scale in percentage of screen width\n    // x position in percentage of screen width\n    // y position in percentage of screen height\n    // buttonImg is just the button image\n    public Button(int x, int y, float scale, Sprite buttonImg, Sprite buttonImg2){\n        this.buttonImg=buttonImg;\n        this.buttonImg2=buttonImg2;\n\n        float ratio = buttonImg.getWidth() / buttonImg.getHeight();\n        buttonImg.setSize(Gdx.graphics.getWidth()/100 * scale,Gdx.graphics.getWidth()/100 * scale / ratio );\n\n        this.x = (Gdx.graphics.getWidth() - buttonImg.getWidth())/100 * x;\n        this.y = (Gdx.graphics.getHeight() - buttonImg.getHeight())/100 *y;\n        buttonImg.setPosition(this.x,this.y);\n        this.width = (int) buttonImg.getWidth();\n        this.height= (int) buttonImg.getHeight();\n\n        buttonImg2.setSize(Gdx.graphics.getWidth()/100 * scale,Gdx.graphics.getWidth()/100 * scale / ratio );\n        buttonImg2.setPosition(this.x,this.y);\n\n\n\n\n    }\n\n    // just draws the button\n    public void drawButton(SpriteBatch batch){\n        if(whatTodDisplay==0){\n            buttonImg2.draw(batch);\n\n        }\n        else{\n            buttonImg.draw(batch);\n        }\n\n    }\n\n    // returns true if button is touched\n    public boolean isTouched(){\n        boolean res= Gdx.input.justTouched() && x < Gdx.input.getX() && Gdx.input.getX() < x+width\n                &&  y < -Gdx.input.getY() + Gdx.graphics.getHeight() && -Gdx.input.getY() + Gdx.graphics.getHeight() < y + height ;\n        if(res){\n            whatTodDisplay += 1;\n            whatTodDisplay %= 2;\n        }\n        return res;\n    }\n\n\n}\n",		"name" : "Button",		"relations" : [			"Button"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.Screen;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.g2d.TextureRegion;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.maps.objects.PolygonMapObject;\nimport com.badlogic.gdx.math.Intersector;\nimport com.badlogic.gdx.math.Polygon;\nimport com.badlogic.gdx.math.Rectangle;\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.math.Vector3;\nimport com.badlogic.gdx.physics.box2d.Shape;\nimport com.badlogic.gdx.InputAdapter;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\nimport ch.inf.usi.pf2.project.BoatManager2k16;\nimport ch.inf.usi.pf2.project.gameStates.Map;\n\n/**\n * Created by alexandercamenzind on 14/05/16.\n */\npublic class Path{\n    private ShapeRenderer shapeRenderer;\n    private OrthographicCamera cam;\n    private int c1; // 1/4 of Map width\n\n\n    private  ArrayList<Line> left;\n    private Line top;\n\n    private MapObjects landPolygons;\n    public boolean active;\n    private Color pathColor;\n\n    private Port from;\n    private Port to;\n    public int distanceFromTo;\n\n\n\n    public Path(ShapeRenderer shapeRenderer, OrthographicCamera cam, int MAP_WIDTH, MapObjects landPolygons){\n        this.shapeRenderer = shapeRenderer;\n        left = new ArrayList<Line>();\n        this.cam =cam;\n        c1=MAP_WIDTH/4;\n        this.landPolygons=landPolygons;\n        active = false;\n\n        Random rand = new Random();\n        float r = rand.nextFloat();\n        float g = rand.nextFloat();\n        float b = rand.nextFloat();\n\n        pathColor = new Color(r,g,b,1);\n\n\n    }\n\n    public boolean isEmpty(){\n        return left.size() == 0;\n    }\n\n    public void addFirstLine(Port p, Vector3 portCoordinates){\n        Rectangle r = p.getHitBox();\n        Vector3 in = new Vector3(r.getX()+r.getWidth()/2,r.getY()+r.getHeight()/2,0);\n        int cQ = computeQuadrant(portCoordinates); //cq = currentQuadrant\n\n        Line l;\n        l = new Line(new Vector2(in.x, in.y), new Vector2(in.x, in.y), cQ, cQ);\n        left.add(l);\n        top=l;\n        from =p;\n    }\n\n    //returns true when the path is finished\n    public boolean inputPath4(Port p){\n\n        Vector3 in = cam.unproject(new Vector3(Gdx.input.getX(),Gdx.input.getY(),0));\n        int cQ = computeQuadrant(in); //cq = currentQuadrant\n        int offset=40;\n        Line l;\n\n        //last line\n        if(p!= null && p != from){\n            l = new Line(top.getEnd(),new Vector2(in.x,in.y),top.endQuadrant,cQ);\n            Line k;\n            if(cQ>=2){\n                k=new Line(new Vector2(l.getStart().x+2*c1,l.getStart().y),l.getEnd(),0,0);\n            }\n            else {\n                k = new Line(l.getStart(), l.getEnd(), l.startQuadrant, l.endQuadrant);\n            }\n            Vector2 offsetEnd=new Vector2(l.getEnd().x - offset*k.getDirection().x,l.getEnd().y - offset*k.getDirection().y);\n\n            if(checkLandCollision(new Line(l.getStart(),offsetEnd,l.startQuadrant,l.endQuadrant))){\n                //sets the line in the middle of the port\n                if(cQ>=2) {\n                    l = new Line(top.getEnd(), new Vector2(p.getHitBox().getX()+ p.getHitBox().getWidth() / 2+ 2*c1, p.getHitBox().getY() + p.getHitBox().getHeight() / 2), top.endQuadrant, cQ);\n                }\n                else {\n                    l = new Line(top.getEnd(), new Vector2(p.getHitBox().getX()+ p.getHitBox().getWidth() / 2 , p.getHitBox().getY() + p.getHitBox().getHeight() / 2), top.endQuadrant, cQ);\n                }\n                l.addLine(left,c1);\n                top = left.get(left.size()-1);\n                to=p;\n                distanceFromTo=p.distanceBetweenPorts(from,to,c1*4);\n                return true;\n            }\n        }\n\n\n\n        if(isEmpty() && notInLand(in)){ // path is empty -> we need to check if we start from inside a country\n            if(cQ>=2){\n                l = new Line(new Vector2(in.x-2*c1,in.y),new Vector2(in.x-2*c1,in.y),cQ,cQ);\n            }\n            else {\n                l = new Line(new Vector2(in.x, in.y), new Vector2(in.x, in.y), cQ, cQ);\n            }\n            left.add(l);\n        }\n        else if(! isEmpty() && notInLand(in)){\n            l = new Line(top.getEnd(),new Vector2(in.x,in.y),top.endQuadrant,cQ);\n            if(left.size()==1){\n\n                Vector2 offsetStart= new Vector2(l.getStart().x+offset*l.getDirection().x,l.getStart().y+offset*l.getDirection().y);\n                Line someV;\n                if(cQ>=2){\n                    someV = new Line(new Vector2(top.getEnd().x+2*c1,top.getEnd().y),new Vector2(in.x,in.y),top.endQuadrant,cQ);\n                    offsetStart=new Vector2(l.getStart().x+offset*someV.getDirection().x,l.getStart().y+offset*someV.getDirection().y);\n                }\n\n\n                if(checkLandCollision(new Line(offsetStart,l.getEnd(),l.startQuadrant,l.endQuadrant))){\n                    l.addLine(left,c1);\n                }\n            }\n            else if(checkLandCollision(l)) {\n                l.addLine(left, c1);\n            }\n\n        }\n\n        if(left.size()>0) {\n            top = left.get(left.size()-1);\n        }\n        return false;\n\n    }\n\n\n    // returns true if the line is fine\n    private boolean checkLandCollision(Line l){\n        //if(l.startQuadrant<l.endQuadrant)\n        Line v;\n        if(l.startQuadrant >= 2){\n            v = new Line(new Vector2(l.getStart().x+2*c1,l.getStart().y),l.getEnd(),0,0);\n        }\n        else{\n            v = l;\n        }\n        return ! v.intersectsWithPolygons(landPolygons);\n    }\n\n\n    private boolean notInLand(Vector3 in){\n        boolean res =true;\n        for(MapObject o: landPolygons){\n            if(o instanceof PolygonMapObject){\n                Polygon p =((PolygonMapObject) o).getPolygon();\n                if(p.contains(in.x,in.y)){\n                    res =false;\n                }\n            }\n        }\n        return res;\n    }\n\n\n    private int computeQuadrant(Vector3 v){\n\n        int posX =(int) v.x;\n        int quadrant;\n        if(posX<=c1){\n            quadrant = 0;\n        }\n        else if(posX<2*c1){\n            quadrant = 1;\n        }\n        else if(posX < 3*c1){\n            quadrant = 2;\n        }\n        else{\n            quadrant = 3;\n        }\n        return quadrant;\n    }\n\n    public void drawPath3(int mode){\n\n        shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);\n        shapeRenderer.setColor(pathColor);\n        for(Line l : left){\n            l.draw(shapeRenderer);\n            l.leftToRight(2*c1).draw(shapeRenderer);\n        }\n        if(Gdx.input.isTouched() && !isEmpty() && mode ==1 && active){\n            Vector3 v = cam.unproject(new Vector3(Gdx.input.getX(),Gdx.input.getY(),0));\n            Line current;\n            if(top.endQuadrant>=2) {\n                current = new Line(new Vector2(top.getEnd().x+2*c1,top.getEnd().y), new Vector2(v.x, v.y), 0, 0);\n            }\n            else{\n                current = new Line(top.getEnd(), new Vector2(v.x, v.y), 0, 0);\n            }\n            current.draw(shapeRenderer);\n            shapeRenderer.setColor(Color.GOLD);\n            shapeRenderer.circle(v.x, v.y, 10);\n        }\n        shapeRenderer.setColor(Color.GOLD);\n        if(top!= null && ((active && ! Gdx.input.isTouched()) || !active)) {\n            shapeRenderer.circle(top.getEnd().x, top.getEnd().y, 10);\n            shapeRenderer.circle(top.getEnd().x+2*c1, top.getEnd().y, 10);\n        }\n        shapeRenderer.end();\n    }\n\n    public void undo(){\n        if(top.addedTwo()&& left.size()>1){\n            left.remove(left.size()-1);\n            left.remove(left.size()-1);\n        }\n        else if(left.size()>1) {\n            left.remove(left.size()-1);\n        }\n        top = left.get(left.size()-1);\n    }\n\n\n    public void notifyPath() {\n\n        for (Line l : left) {\n            l.swqpQuadrants();\n        }\n    }\n\n    public ArrayList<Line> getPositions(){\n        return left;\n    }\n    public Line getTop(){return top;}\n}\n",		"name" : "Path",		"relations" : [			"Line",			"Ports",			"Path",			"Map",			"Manager",			"Boat",			"Port",			"BoatManager2k16"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\nimport java.util.ArrayList;\nimport java.util.Random;\n\n/**\n * Created by simonreding on 29/05/16.\n */\npublic class Place {\n    private int x;\n    private int y;\n    private String name;\n\n    public Place(int x, int y, String name){\n        this.x = x;\n        this.y = y;\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n\n}\n\n",		"name" : "Place",		"relations" : [			"Place"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.gameStates;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\n\nimport ch.inf.usi.pf2.project.miniGameObjects.Boat;\n\n/**\n * Created by alexandercamenzind on 28/04/16.\n */\npublic class MiniGame extends GameState {\n    private SpriteBatch batch;\n    private OrthographicCamera cam;\n    private Sprite bg;\n    private Sprite bg2;\n\n    private float WorldHeight;\n    private float WorldWidth;\n    private Boat boat;\n    private float aspectRatio;\n\n\n    public MiniGame(SpriteBatch batch){\n\n\n        this.bg = new Sprite ( new Texture(\"miniGameBackground.png\"));\n        bg2= new Sprite (new Texture(\"miniGameBackground.png\"));\n        bg2.translateX(bg.getWidth());\n        this.batch=batch;\n\n        WorldHeight=bg.getHeight();\n        WorldWidth=bg.getWidth();\n        aspectRatio = (float) Gdx.graphics.getWidth() / (float) Gdx.graphics.getHeight();\n        this.cam = new OrthographicCamera(WorldHeight * aspectRatio, WorldHeight);\n        cam.position.set((WorldHeight * aspectRatio)/2f,WorldHeight/2f,0); \n\n        boat = new Boat(new Sprite( new Texture(\"testBoat.png\")), (WorldHeight * aspectRatio)/2f, WorldHeight/2f, WorldHeight, WorldWidth);\n\n\n\n    }\n\n    @Override\n    public void renderGameObject(){\n\n        // resets the frame probably\n        Gdx.gl.glClearColor(1, 1, 1, 1);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n\n        cam.update();\n        batch.setProjectionMatrix(cam.combined);\n\n        //this is where we can actually display stuff on the screen\n        batch.begin();\n        bg.draw(batch);\n        bg2.draw(batch);\n        boat.getBoat().draw(batch);\n        batch.end();\n\n    }\n\n    public int nextState(){\n\n        return 0;\n    }\n\n    @Override\n    public void update(float dt){\n        boat.updateBoat(dt);\n\n\n        //this makes the background be infinite\n        if(cam.position.x > 1.5 * WorldWidth ){\n            boat.reset();\n        }\n\n        cam.position.set(boat.getBoat().getX()+(WorldHeight * aspectRatio)/2f, WorldHeight / 2f, 0);\n\n\n    }\n\n    @Override\n    public void inputHandler(){\n        boat.handleInput();\n    }\n\n}\n",		"parent" : "GameState",		"relations" : [			"MiniGame",			"Boat",			"GameState"		],		"name" : "MiniGame",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g3d.particles.ParticleEffectLoader;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapProperties;\nimport com.badlogic.gdx.maps.objects.EllipseMapObject;\nimport com.badlogic.gdx.maps.objects.RectangleMapObject;\nimport com.badlogic.gdx.maps.tiled.TiledMap;\nimport com.badlogic.gdx.maps.tiled.TiledMapRenderer;\nimport com.badlogic.gdx.maps.tiled.TmxMapLoader;\nimport com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;\nimport com.badlogic.gdx.math.Ellipse;\nimport com.badlogic.gdx.math.Rectangle;\nimport com.badlogic.gdx.math.Vector3;\nimport com.badlogic.gdx.utils.Json;\n\nimport ch.inf. usi.pf2.project.mapObjects.Button;\nimport ch.inf.usi.pf2.project.mapObjects.Path;\nimport ch.inf.usi.pf2.project.mapObjects.Ports;\nimport ch.inf.usi.pf2.project.mapObjects.Port;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\n/**\n * Created by ilijagjorgjiev on 5/19/16.\n */\npublic class Player {\n\n    public int money;\n    public ArrayList<Boat> boats;\n    private ArrayList<Boat> possibleBoats;\n    private ArrayList<Article> articles;\n    private ArrayList<Disaster> disasters;\n    private Ports ports;\n    public int MAP_WIDTH;\n    private final static int startMoney=100000;\n    //\n\n\n\n\n    public Player()\n    {\n        this.money=startMoney;\n        this.boats = new ArrayList<Boat>();\n        this.articles = new ArrayList<Article>();\n        this.disasters = new ArrayList<Disaster>();\n        possibleBoats = new ArrayList<Boat>();\n\n        TiledMap tiledMap = new TmxMapLoader().load(\"tileWorldMap.tmx\");\n        MapProperties prop = tiledMap.getProperties();\n        MAP_WIDTH = prop.get(\"width\", Integer.class) * prop.get(\"tilewidth\", Integer.class);\n        ports=new Ports(tiledMap.getLayers().get(\"SquarePorts\").getObjects(),MAP_WIDTH);\n\n    }\n\n    public void addBoat(Boat b){\n        boats.add(b);\n    }\n    public void removeBoat(Boat b) {boats.remove(b);}\n    public int numberOfBoatsOwned(){\n        int i = boats.size();\n        return i;\n    }\n\n    public void handlePlayerInput(boolean touchUp){\n\n    }\n    public void addArticles(ArrayList<Article> newA){\n        articles.addAll(newA);\n    }\n\n    public void addDisasters(ArrayList<Disaster> dis){\n        disasters.addAll(dis);\n    }\n\n    public ArrayList<Article> getArticles() {\n        return articles;\n    }\n\n    public ArrayList<Boat> getBoats() {\n        return boats;\n    }\n\n\n    public void setBoats(ArrayList<Boat> boats) {\n        this.boats = boats;\n    }\n    public Ports getPorts() {\n        return ports;\n    }\n    public void addPossibleBoats(SpriteBatch batch ,OrthographicCamera cam,ShapeRenderer shapeRenderer,int MAP_WIDTH,MapObjects polygonMapObjects){\n\n        possibleBoats.add(new Boat(10450,1200,50.2,10000,1110, new Sprite(new Texture(\"topBoat1.png\")),\n                new Sprite(new Texture(\"sideBoat1.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"apollo\",1));\n\n        possibleBoats.add(new Boat(18000,1600,55.2,19000,110, new Sprite(new Texture(\"topBoat2.png\")),\n                new Sprite(new Texture(\"sideBoat2.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"echo\",2));\n\n        possibleBoats.add(new Boat(23000,2000,60.2,19000,110, new Sprite(new Texture(\"topBoat3.png\")),\n                new Sprite(new Texture(\"sideBoat3.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"frejus\",3));\n\n        possibleBoats.add(new Boat(25000,2200,65.2,19000,110, new Sprite(new Texture(\"topBoat3.png\")),\n                new Sprite(new Texture(\"sideBoat4.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"helena\",4));\n\n        possibleBoats.add(new Boat(30000,3000,61.2,19000,110, new Sprite(new Texture(\"topBoat5.png\")),\n                new Sprite(new Texture(\"sideBoat5.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"jester\",5));\n\n        possibleBoats.add(new Boat(40100,3500,57.2,19000,110, new Sprite(new Texture(\"topBoat6.png\")),\n                new Sprite(new Texture(\"sideBoat6.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"luna\",6));\n\n        possibleBoats.add(new Boat(70000,7000,60.2,19000,110, new Sprite(new Texture(\"topBoat7.png\")),\n                new Sprite(new Texture(\"sideBoat7.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"aria\",7));\n\n        possibleBoats.add(new Boat(100000,12000,55.3,19000,110, new Sprite(new Texture(\"topBoat8.png\")),\n                new Sprite(new Texture(\"sideBoat8.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"nicas\",8));\n\n        possibleBoats.add(new Boat(150000,25000,60.2,19000,110, new Sprite(new Texture(\"topBoat9.png\")),\n                new Sprite(new Texture(\"sideBoat9.png\")),batch,cam,shapeRenderer, MAP_WIDTH, polygonMapObjects,\"titanic\",9));\n\n\n    }\n\n    public ArrayList<Boat> getPossibleBoats(){ return possibleBoats; }\n\n\n\n\n    public void updateDamage(){\n        for(Disaster dis : disasters){\n            for(Boat boat : boats){\n                int dist = dis.getGravity() * 10;\n                //if(boat.isTraveling()){System.out.println(dist);}\n                if(dis.getX() - dist < (int)boat.getX()&&\n                        dis.getX() + dist > (int)boat.getX()&&\n                        dis.getY() - dist < (int)boat.getY() &&\n                        dis.getY() + dist > (int)boat.getY() && boat.isTraveling()){\n                    Random rn = new Random();\n\n                    if(boat.getVulnerability() > 0){\n                        System.out.println(\"boat in distress\");\n                        boat.setVulnerability(rn.nextInt((int)boat.getVulnerability()+5)/8);\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    //removes disasters\n    public void removeDisasters(){\n        Random rn = new Random();\n        while (disasters.size() > 5){\n            disasters.remove(disasters.size()-1);\n        }\n        //System.out.println(disasters.size());\n    }\n    //removes articles\n    public void removeArticle(){\n        Random rn = new Random();\n        while (articles.size() > 20){\n            articles.remove(articles.size()-1);\n        }\n        //System.out.println(articles.size());\n    }\n\n    public void updateMoney(){\n        for(Boat b: boats){\n            money+=b.updateMoney();\n        }\n    }\n\n\n    public void buildPlayerFromDb(String s){\n        //System.out.println(s);\n        try {\n            Json json = new Json();\n            SaveState saveState = json.fromJson(SaveState.class, s);\n\n            money = saveState.playerMoney;\n\n            for (BoatSaver b : saveState.bs) {\n                Boat boat = possibleBoats.get(b.boatVal-1).copyBoat(0, b.boatVal);\n                boat.setLabel(b.label);\n                boat.counter_upgrage=b.upgradeCount;\n                boat.capacity=b.capacity;\n\n\n                boats.add(boat);\n\n            }\n        }catch (Exception e){\n        }\n\n\n        //Boat b = json.fromJson(Boat.class,s);\n        //ArrayList<Boat> b = json.fromJson(ArrayList<Boat.class>,)\n        //boats.add(b);\n    }\n\n    public String buildDatabaseFromPlayer() {\n        SaveState saveState = new SaveState(money);\n        for (Boat b : boats) {\n            saveState.add(new BoatSaver(b));\n        }\n\n        Json json = new Json();\n        String s = json.toJson(saveState);\n        return s;\n    }\n\n\n    public void rmBoat(){\n        for (Boat boat:boats){\n            int i = 0;\n            if (boat.getVulnerability() <= 1){\n                boats.remove(i);\n                i++;\n                System.out.println(\"removed Boat\");\n            }\n        }\n\n    }\n\n    public void reset(){\n        boats = new ArrayList<Boat>();\n        money = startMoney;\n    }\n\n    public void removeStage(){\n    }\n\n\n}\n",		"name" : "Player",		"relations" : [			"Article",			"Ports",			"Button",			"Path",			"Player",			"Map",			"BoatSaver",			"Boat",			"Port",			"Disaster",			"SaveState"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.gameStates;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.TextureRegion;\n\n/**\n * Created by alexandercamenzind on 27/04/16.\n */\npublic class Menu extends GameState {\n    private SpriteBatch batch;\n    private final Texture background;\n\n\n    public Menu(SpriteBatch batch){\n        this.batch = batch;\n        this.background = new Texture(\"badlogic.jpg\");\n\n    }\n\n    @Override\n    public void renderGameObject() {\n\n        // resets the frame probably\n        Gdx.gl.glClearColor(1, 1, 1, 1);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n\n        //this is where we can actually display stuff on the screen\n        batch.begin();\n\n        batch.draw(new TextureRegion(background),100,100,100,100,200,200,1,1,0);\n\n        batch.end();\n\n    }\n    public int nextState(){\n\n        return 0;\n    }\n    @Override\n    public void update(float dt){\n    }\n\n    @Override\n    public void inputHandler(){\n    }\n}\n",		"parent" : "GameState",		"relations" : [			"Menu",			"GameState"		],		"name" : "Menu",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.gameStates;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.InputMultiplexer;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.g2d.NinePatch;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapProperties;\nimport com.badlogic.gdx.maps.objects.EllipseMapObject;\nimport com.badlogic.gdx.maps.objects.PolygonMapObject;\nimport com.badlogic.gdx.maps.objects.RectangleMapObject;\nimport com.badlogic.gdx.maps.tiled.TiledMap;\nimport com.badlogic.gdx.maps.tiled.TiledMapRenderer;\nimport com.badlogic.gdx.maps.tiled.TmxMapLoader;\nimport com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;\nimport com.badlogic.gdx.math.Ellipse;\nimport com.badlogic.gdx.math.Matrix4;\nimport com.badlogic.gdx.math.Polygon;\nimport com.badlogic.gdx.math.Rectangle;\nimport com.badlogic.gdx.math.Vector3;\nimport com.badlogic.gdx.scenes.scene2d.EventListener;\nimport com.badlogic.gdx.scenes.scene2d.InputEvent;\nimport com.badlogic.gdx.scenes.scene2d.Stage;\nimport com.badlogic.gdx.scenes.scene2d.ui.ButtonGroup;\nimport com.badlogic.gdx.scenes.scene2d.ui.ImageButton;\nimport com.badlogic.gdx.scenes.scene2d.ui.Label;\nimport com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.Table;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\nimport com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup;\nimport com.badlogic.gdx.scenes.scene2d.utils.ActorGestureListener;\nimport com.badlogic.gdx.scenes.scene2d.utils.ClickListener;\nimport com.badlogic.gdx.utils.Align;\nimport com.badlogic.gdx.utils.viewport.ScreenViewport;\n\n\nimport ch.inf.usi.pf2.project.NativeFunctions;\nimport ch.inf.usi.pf2.project.mapObjects.Boat;\nimport ch.inf.usi.pf2.project.mapObjects.BoatButton;\nimport ch.inf. usi.pf2.project.mapObjects.Button;\nimport ch.inf.usi.pf2.project.mapObjects.Player;\nimport ch.inf.usi.pf2.project.mapObjects.Ports;\nimport ch.inf.usi.pf2.project.mapObjects.Port;\nimport javafx.scene.input.TouchEvent;\nimport javafx.scene.text.Text;\n\nimport java.util.ArrayList;\n\n/**\n * Created by alexandercamenzind on 28/04/16.\n */\npublic class Map extends GameState {\n\n\n\n    //TODO: Reset button, such that you can cancel making a path (at least it cancels the selection now)\n    //TODO: format the buttons nicely\n    //TODO: maybe add dialogs for stuff\n\n\n    // all the stuff we need for drawing\n    private SpriteBatch batch;\n    private final Matrix4 initialProjectionMatrix;\n\n\n    private OrthographicCamera cam;\n    private ShapeRenderer shapeRenderer;\n    private TiledMap tiledMap;\n    private TiledMapRenderer tiledMapRenderer;\n    private MapProperties prop;\n\n    // MAP_WIDTH is the width of the background in pixel\n    // MAP_HEIGHT is the height of the background in pixel\n    private int MAP_WIDTH;\n    private int MAP_HEIGHT;\n\n\n    private MapObjects polygonMapObjects;\n\n\n    private int mode; // 0 = moving, 1 = drawing\n    private Player player;\n\n    private Boat courrentBoat;\n    private Port currentPort;\n    private Vector3 portTouchedCoordinates;\n    private boolean start;\n\n    private boolean touchUp;\n    private boolean wasTouched;\n    private boolean modeChanged;\n    private boolean stageButtonTouched;\n    private boolean boatselected;\n    private boolean drawing;\n    private boolean selectingBoat;\n\n    private Stage stage; //\n\n    private com.badlogic.gdx.scenes.scene2d.ui.Button managerNext;\n    private com.badlogic.gdx.scenes.scene2d.ui.Button newsNext;\n    private com.badlogic.gdx.scenes.scene2d.ui.Button pauseNext;\n    private int nextState;\n    private Label playerMoney;\n    private Skin skin;\n    private ArrayList<BoatButton> boatButtons;\n\n\n\n    public Map(SpriteBatch batch, Player player){\n       // System.out.println(Gdx.input.getInputProcessor());\n        this.batch = batch;\n        this.initialProjectionMatrix = batch.getProjectionMatrix().cpy();\n\n        // setup shapeRenderer (allows us to draw stuff like rectangles or lines)\n        shapeRenderer= new ShapeRenderer();\n\n        // set up camera\n        float w = Gdx.graphics.getWidth();\n        float h = Gdx.graphics.getHeight();\n        cam = new OrthographicCamera();\n        cam.setToOrtho(false,720*w/h,720);\n        cam.update();\n\n        // set up map\n        tiledMap = new TmxMapLoader().load(\"tileWorldMap.tmx\");\n        tiledMapRenderer = new OrthogonalTiledMapRenderer(tiledMap);\n        prop = tiledMap.getProperties();\n        MAP_HEIGHT = prop.get(\"height\", Integer.class) * prop.get(\"tileheight\", Integer.class);\n        MAP_WIDTH = prop.get(\"width\", Integer.class) * prop.get(\"tilewidth\", Integer.class);\n\n        this.polygonMapObjects = tiledMap.getLayers().get(\"Polygons\").getObjects();\n\n\n\n\n\n        this.player=player;\n        player.addPossibleBoats(this.batch, this.cam,this.shapeRenderer,this.MAP_WIDTH,polygonMapObjects); // SpriteBatch batch, OrthographicCamera cam, ShapeRenderer shapeRenderer, int WORLD_WIDTH,MapObjects landPolygons,\n\n\n\n\n\n\n\n\n\n\n        // i think we might need this\n        Gdx.gl.glClearColor(1, 1, 1, 1);\n\n        mode = 0;\n        touchUp=false;\n        wasTouched=false;\n        modeChanged=false;\n        this.skin = new Skin(Gdx.files.internal(\"uiskin.json\"));\n\n        stage=new Stage(new ScreenViewport(),batch);\n\n        Gdx.input.setInputProcessor(stage);\n\n        stageButtonTouched =false;\n        boatselected=false;\n        drawing=false;\n\n        start = false;\n        selectingBoat=false;\n\n\n        nextState =0;\n        NinePatch temp = new NinePatch(new Texture(\"titleTexture.png\"), 10, 10, 10, 10);\n        Skin skin2 = new Skin();\n        skin.add(\"background\",temp);\n        playerMoney = new Label(\"$$$$ Money $$$$$: \",skin );\n        Label.LabelStyle l = playerMoney.getStyle();\n        l.background= skin.getDrawable(\"background\");\n        playerMoney.setColor(Color.WHITE);\n        permanentActors();\n        boatButtons=new ArrayList<BoatButton>();\n\n\n    }\n\n    @Override\n    public void renderGameObject(){\n\n\n\n        Gdx.gl.glBlendFunc(GL20.GL_SRC_ALPHA, GL20.GL_ONE_MINUS_SRC_ALPHA); // im not sure what that does but i'll leave it in case we need it\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n\n        // we have to update the camera, before we can render\n        showPolygons();\n        cam.update();\n        tiledMapRenderer.setView(cam);\n        tiledMapRenderer.render();\n\n        player.updateDamage();\n        player.rmBoat();\n\n        for(Boat b: player.getBoats()){\n            //if(b.getCurrentPath() != null)\n            b.getCurrentPath().drawPath3(mode);\n        }\n\n        // batch will draw according to screen coordinates\n        batch.begin();\n        batch.setProjectionMatrix(cam.combined);\n        player.getPorts().drawPorts(batch);\n\n        for(Boat b: player.getBoats()){\n            b.drawBoatOnMap();\n        }\n\n\n        batch.setProjectionMatrix(initialProjectionMatrix);\n\n\n\n\n\n        batch.end();\n\n        stage.draw();\n\n        // showHitBoxes();\n        //showPorts();\n\n\n    }\n\n    // We should write everything that gets updated every frame in here\n    @Override\n    public void update(float dt){\n        for(Boat b : player.getBoats()) {\n            if (b != null) {\n                b.updateBoat(dt);\n            }\n        }\n        player.rmBoat();\n        Gdx.input.setInputProcessor(stage);\n\n        player.updateMoney();\n        playerMoney.setText(\"Cash: \" + player.money + \"$\");\n        pushCameraBack();\n    }\n\n\n    // handles input events\n    @Override\n    public void inputHandler(){\n\n\n\n        stage.act(Gdx.graphics.getDeltaTime());\n\n\n        if(newsNext.isPressed()||managerNext.isPressed()){\n            stageButtonTouched=true;\n        }\n\n        if(! Gdx.input.isTouched() && wasTouched){\n            touchUp =true;\n        }\n\n\n\n\n\n\n        Port p = player.getPorts().handlePortInput(cam);\n        if(p!= null && Gdx.input.justTouched() && !selectingBoat){\n            System.out.println(\"wut\");\n            if(!drawing){\n                showBoatButtonList();\n            }\n            currentPort = p;\n            portTouchedCoordinates = cam.unproject(new Vector3(Gdx.input.getX(),Gdx.input.getY(),0));\n            start=true;\n        }\n\n\n\n\n        // moves the camera across the background according to dx and dy\n        if(mode == 0 && !selectingBoat) {\n            cam.translate(-Gdx.input.getDeltaX(), Gdx.input.getDeltaY());\n        }\n        else if(mode == 1 && !modeChanged && touchUp && !stageButtonTouched){\n            if(courrentBoat.getCurrentPath().inputPath4(p)){\n                mode = 0;\n                drawing=false;\n                stage.clear();\n                permanentActors();\n                courrentBoat.setVisible(true);\n                courrentBoat.startBoat();\n\n            }\n            start=false;\n\n        }\n        stageButtonTouched=false;\n\n\n\n\n\n        if(touchUp){\n            modeChanged=false;\n        }\n        touchUp=false;\n        wasTouched=Gdx.input.isTouched();\n\n    }\n\n    // this method pushes the camera back in bound, if someone tried to leave bounds,\n    // also it will make the illusion of an infinite background\n    private void pushCameraBack(){\n        Vector3 pos = cam.position;\n        if(pos.x + cam.viewportWidth/2 > MAP_WIDTH ){\n            cam.position.x = 2*MAP_WIDTH/4 - cam.viewportWidth/2;\n            if(courrentBoat!= null) {\n                courrentBoat.getCurrentPath().notifyPath(); //tells the path, that we just wrapped around the screen\n            }\n        }\n        else if(pos.x - cam.viewportWidth/2< 0){\n            cam.position.x = 2*MAP_WIDTH/4 + cam.viewportWidth/2;\n            if(courrentBoat != null) {\n                courrentBoat.getCurrentPath().notifyPath();\n            }\n        }\n\n        if(cam.position.y - (cam.zoom*cam.viewportHeight)/2 <0){\n            cam.position.y = cam.zoom*cam.viewportHeight/2;\n        }\n        if(cam.position.y + (cam.zoom*cam.viewportHeight)/2 > MAP_HEIGHT){\n            cam.position.y = MAP_HEIGHT - cam.zoom*cam.viewportHeight/2;\n        }\n    }\n\n    // this method will draw a red rectangle at the hitboxes defined in the tiled map\n    /*\n    private void showHitBoxes(){\n        shapeRenderer.setProjectionMatrix(cam.combined);\n\n        for(MapObject object : objects){\n            if(object instanceof RectangleMapObject){\n\n\n                RectangleMapObject rec =  (RectangleMapObject) object;\n\n                shapeRenderer.begin(ShapeType.Filled);\n                shapeRenderer.setColor(Color.RED);\n                Rectangle r = rec.getRectangle();\n                shapeRenderer.rect(r.x, r.y, r.width, r.height);\n                shapeRenderer.rect(r.x+MAP_WIDTH/2,r.y,r.width,r.height);\n                shapeRenderer.end();\n            }\n        }\n\n    }\n    */\n\n\n\n    private void showPolygons(){\n        shapeRenderer.setProjectionMatrix(cam.combined);\n        shapeRenderer.begin(ShapeType.Line);\n        shapeRenderer.setColor(Color.CLEAR);\n        for(MapObject o : polygonMapObjects){\n            if(o instanceof PolygonMapObject){\n                Polygon p = ((PolygonMapObject) o).getPolygon();\n\n                float[] prevVertices = p.getVertices();\n                float[] vertices =new float[prevVertices.length];\n                float offsetX = p.getX();\n                float offsetY = p.getY();\n                for(int i = 0; i< vertices.length;i++){\n                    if(i%2 == 0){\n                        vertices[i] = prevVertices[i]+offsetX;\n                    }\n                    else{\n                        vertices[i] = prevVertices[i]+offsetY;\n                    }\n                }\n                shapeRenderer.polygon(vertices);\n\n            }\n        }\n\n        shapeRenderer.end();\n    }\n\n    public void showBoatButtonList(){\n        selectingBoat=true;\n\n        Table table2 = new Table();\n        table2.align(Align.top | Align.center);\n        table2.setFillParent(true);\n\n\n\n        Table table = new Table();\n        // table.setFillParent(true);\n        table.align(Align.top| Align.center);\n        table.setWidth(stage.getWidth());\n        table.setHeight(stage.getHeight());\n        //table.debug();\n\n\n\n        final TextButton confirm = new TextButton(\"Confirm\",skin);\n        float pad=Gdx.graphics.getHeight()/45;\n        confirm.padTop(pad);\n        confirm.padBottom(pad);\n        confirm.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n\n        confirm.addListener(new ClickListener() {\n            @Override\n            public void clicked(InputEvent event, float x, float y) {\n\n                stageButtonTouched=true;\n                if(boatselected) {\n                    courrentBoat.getCurrentPath().addFirstLine(currentPort, portTouchedCoordinates);\n                    stage.clear();\n                    boatButtons.clear();\n                    mode = 1;\n                    drawing=true;\n                    selectingBoat=false;\n                    permanentActors();\n                    boatselected=false;\n                }\n            }\n        });\n        final TextButton cancel = new TextButton(\"cancel\",skin);\n        cancel.padTop(pad);\n        cancel.padBottom(pad);\n        cancel.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        cancel.addListener(new ClickListener() {\n            @Override\n            public void clicked(InputEvent event, float x, float y) {\n                stage.clear();\n                boatButtons.clear();\n                mode=0;\n                drawing =false;\n                selectingBoat=false;\n                permanentActors();\n                boatselected=false;\n\n            }\n        });\n\n\n\n        //table.add(confirm);\n        VerticalGroup verticalGroup2 = new VerticalGroup();\n        verticalGroup2.setWidth(Gdx.graphics.getWidth()/4);\n        verticalGroup2.fill();\n        verticalGroup2.addActor(confirm);\n        verticalGroup2.addActor(cancel);\n        TextButton text  =new TextButton(\"select boat\",skin);\n        text.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        text.setColor(Color.BLACK);\n        verticalGroup2.addActor(text);\n        verticalGroup2.padTop(Gdx.graphics.getHeight()/2 - verticalGroup2.getPrefHeight());\n        confirm.setWidth(Gdx.graphics.getWidth()/4);\n\n\n        //verticalGroup2.fill()\n        table2.add(verticalGroup2).width(Gdx.graphics.getWidth()/4);//.width(Gdx.graphics.getWidth()/4).padTop();\n\n\n\n        VerticalGroup verticalGroup = new VerticalGroup();\n        verticalGroup.fill();\n\n\n        ScrollPane scrollPane =  new ScrollPane(verticalGroup);\n        scrollPane.setHeight(stage.getHeight()/2);\n        scrollPane.setWidth(Gdx.graphics.getWidth()/4);\n\n        float buttonPad = Gdx.graphics.getHeight()/60;\n\n        for(Boat b: player.getBoats()){\n            final BoatButton tb = new BoatButton(b.getLabel(),skin,b);\n            tb.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n            if(b.isTraveling()){\n                tb.setColor(Color.RED);\n            }\n            tb.padTop(buttonPad);\n            tb.padBottom(buttonPad);\n            verticalGroup.addActor(tb);\n            boatButtons.add(tb);\n            tb.addListener(new ClickListener() {\n                @Override\n                public void clicked(InputEvent event, float x, float y) {\n                    if(!tb.getB().isTraveling()) {\n                        courrentBoat = tb.getB();\n                    }\n                    int i =0;\n                    for(Boat b: player.getBoats()){\n                        b.getCurrentPath().active=false;\n                        BoatButton bb = boatButtons.get(i++);\n                        bb.setColor(Color.GOLD);\n                        if(bb.getB().isTraveling()){\n                            bb.setColor(Color.RED);\n                        }\n\n\n                    }\n                    if(!tb.getB().isTraveling()) {\n                        courrentBoat.getCurrentPath().active = true;\n                        boatselected = true;\n                        tb.setColor(Color.GREEN);\n                    }\n                    stageButtonTouched = true;\n                    //stage.clear();\n                    //start to draw\n                }\n            });}\n\n\n\n\n        table.add(scrollPane).width(Gdx.graphics.getWidth()/4).height(Gdx.graphics.getHeight()/2).padTop(Gdx.graphics.getHeight()/2);//.padTop(4*Gdx.graphics.getHeight()/5);\n\n        stage.addActor(table);\n        stage.addActor(table2);\n        Gdx.input.setInputProcessor(stage);\n\n    }\n\n    private void permanentActors(){\n\n        Table table = new Table();\n\n        table.setFillParent(true);\n\n        TextButton manager = new TextButton(\"Manager\",skin);\n        manager.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        manager.pad(Gdx.graphics.getHeight()/20);\n        managerNext = manager;\n        TextButton news = new TextButton(\"News\",skin);\n        news.pad(Gdx.graphics.getHeight()/20);\n        news.align(Align.bottomRight);\n        news.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        newsNext=news;\n        table.setWidth(Gdx.graphics.getWidth());\n        table.align(Align.bottom| Align.left);\n        table.add(manager);\n        TextButton pause = new TextButton(\"Pause\",skin);\n\n        TextButton zoomPlus = new TextButton(\"zoom in\",skin);\n        zoomPlus.pad(Gdx.graphics.getHeight()/20);\n        zoomPlus.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        zoomPlus.addListener(new ClickListener() {\n            @Override\n            public void clicked(InputEvent event, float x, float y) {\n                cam.zoom-=0.1;\n                System.out.println(cam.zoom);\n                System.out.println(cam.viewportWidth);\n            }\n        });\n\n\n        if(drawing){\n            TextButton undo = new TextButton(\"undo\",skin);\n            undo.pad(Gdx.graphics.getHeight()/20);\n            undo.setColor(0.4f,0.3f,0.2f,1f);\n            undo.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n            undo.addListener(new ClickListener() {\n                @Override\n                public void clicked(InputEvent event, float x, float y) {\n\n                    courrentBoat.getCurrentPath().undo();\n                    stageButtonTouched=true;\n                }\n            });\n\n            TextButton moveDraw = new TextButton(\"move/draw\",skin);\n            moveDraw.pad(Gdx.graphics.getHeight()/20);\n            moveDraw.setColor(0.4f,0.3f,0.2f,1f);\n            moveDraw.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n            moveDraw.addListener(new ClickListener() {\n                @Override\n                public void clicked(InputEvent event, float x, float y) {\n                    mode+=1;\n                    mode%=2;\n                    stageButtonTouched=true;\n                }\n            });\n\n            table.add(undo);\n            table.add(moveDraw);\n            table.add(zoomPlus);\n            table.add().width(Gdx.graphics.getWidth()-manager.getPrefWidth()-news.getPrefWidth()-undo.getPrefWidth()\n            -moveDraw.getPrefWidth());\n\n\n        }else{\n            table.add().width(Gdx.graphics.getWidth()-manager.getPrefWidth()-news.getPrefWidth());\n        }\n\n\n\n        Table tbl = new Table(skin);\n        tbl.align(Align.topRight);\n        tbl.setWidth(Gdx.graphics.getWidth());\n        tbl.setHeight(Gdx.graphics.getHeight());\n        pause.pad(Gdx.graphics.getHeight()/20);\n        tbl.add(pause);\n        news.setColor(1f,1f,1f,0.98f);\n        manager.setColor(1f,1f,1f,0.98f);\n        pause.setColor(1f,1f,1f,0.98f);\n        table.add(news);\n\n        stage.addActor(tbl);\n        stage.addActor(table);\n        Table monaaay = new Table();\n        monaaay.setFillParent(true);\n        monaaay.setWidth(Gdx.graphics.getWidth());\n        monaaay.align(Align.topLeft);\n        monaaay.add(playerMoney);\n        pauseNext = pause;\n\n        pause.align(Align.topRight);\n\n\n\n        EventListener zoomListener = new ActorGestureListener(){\n            @Override\n            public void zoom(InputEvent event, float initialDistance, float distance){\n                System.out.println(initialDistance + \"   \" + distance);\n            }\n\n        };\n        stage.addListener(zoomListener);\n        stage.addActor(monaaay);\n        Gdx.input.setInputProcessor(stage);\n\n    }\n\n    @Override\n    public int nextState(){\n        if(newsNext.isPressed() && Gdx.input.justTouched()){\n            selectingBoat=false;\n            stage.clear();\n            permanentActors();\n            return 1;\n        }\n        else if(managerNext.isPressed() && Gdx.input.justTouched()){\n            selectingBoat=false;\n            stage.clear();\n            permanentActors();\n            return 2;\n        }else if(pauseNext.isPressed() && Gdx.input.justTouched()){\n            selectingBoat=false;\n            stage.clear();\n            permanentActors();\n            return 3;}\n        else {\n            return 0;\n        }\n    }\n    public void removeStage(){\n        stage.dispose();\n    }\n\n\n\n\n\n\n\n\n}\n",		"parent" : "GameState",		"relations" : [			"Line",			"Ports",			"Button",			"Path",			"Player",			"Map",			"Manager",			"Boat",			"GameState",			"Port",			"Pause",			"News",			"NativeFunctions",			"BoatButton"		],		"name" : "Map",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.gameStates;\nimport ch.inf.usi.pf2.project.managerUpgrade.Upgrade;\nimport ch.inf.usi.pf2.project.mapObjects.*;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.Color;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.Pixmap;\nimport com.badlogic.gdx.graphics.g2d.BitmapFont;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.g2d.TextureAtlas;\nimport com.badlogic.gdx.graphics.g2d.TextureRegion;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.scenes.scene2d.InputEvent;\nimport com.badlogic.gdx.scenes.scene2d.Stage;\nimport com.badlogic.gdx.scenes.scene2d.ui.Dialog;\nimport com.badlogic.gdx.scenes.scene2d.ui.Label;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextField;\nimport com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup;\nimport com.badlogic.gdx.scenes.scene2d.ui.Widget;\nimport com.badlogic.gdx.scenes.scene2d.Actor;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.Cell;\nimport com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;\nimport com.badlogic.gdx.scenes.scene2d.ui.Table;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.scenes.scene2d.utils.ClickListener;\nimport com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;\nimport com.badlogic.gdx.utils.Align;\nimport com.badlogic.gdx.utils.Timer;\nimport com.badlogic.gdx.utils.viewport.ScreenViewport;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\nimport com.badlogic.gdx.utils.Timer;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport  com.badlogic.gdx.scenes.scene2d.ui.Image;\nimport com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;\nimport com.badlogic.gdx.scenes.scene2d.ui.List;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.scenes.scene2d.Actor;\nimport com.badlogic.gdx.scenes.scene2d.InputEvent;\nimport com.badlogic.gdx.scenes.scene2d.InputListener;\nimport com.badlogic.gdx.scenes.scene2d.Stage;\nimport com.badlogic.gdx.scenes.scene2d.ui.Label;\nimport com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.Slider;\nimport com.badlogic.gdx.scenes.scene2d.ui.Table;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton.TextButtonStyle;\nimport com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;\nimport com.badlogic.gdx.scenes.scene2d.utils.ClickListener;\nimport com.badlogic.gdx.utils.SnapshotArray;\nimport java.util.ArrayList;\n\n/**\n * Created by simonreding on 17/05/16.\n */\npublic class Manager extends GameState {\n\n    private Player playerObject;\n    private SpriteBatch batch;\n    private Table container;\n    private Stage stage;\n    private Skin skin;\n    private Texture boat;\n    private List list_of_boats;\n    private TextButton back;\n    private boolean bool;\n    private String var;\n    private Image actor;\n    private TextureRegion region;\n    private Table table;\n    private ScrollPane scroll;\n    private Boat testBoat;\n    private Label name;\n    private Label capacity;\n    private Label speed;\n    private Label distanceLimit;\n    private Label maintenanceCost;\n    private Label vulnerability;\n    private Label boat_stats;\n    private Label player_stats;\n    private TextButton buy;\n    private Label price;\n    private Label money;\n    private Label boats_owned;\n    private Dialog dialog;\n    private List list;\n    private TextButton buy_boats;\n    private TextButton your_boats;\n    private ScrollPane scroll1;\n    private ScrollPane scroll2;\n    private boolean scroll1_bool;\n    private boolean scroll2_bool;\n    private boolean buy_bool;\n    private boolean boat_stats_bool;\n    private boolean boat1_bool,boat2_bool,boat3_bool,boat4_bool,boat5_bool,boat6_bool,boat7_bool,boat8_bool,boat9_bool;\n    private int counter1;\n    private int counter2;\n    private int counter3;\n    private int counter4;\n    private int counter5;\n    private int counter6;\n    private int counter7;\n    private int counter8;\n    private int counter9;\n    private ArrayList<String> array;\n    private TextButton upgrade;\n    private Upgrade upgrade_stats;\n    private boolean your_boats_bool;\n    private Boat your_boat;\n    private Texture your_boat_texture;\n    private Image your_actor;\n    private TextureRegion your_region;\n    private ArrayList<Boat> boatArrayList;\n    private boolean already_displayed;\n    private boolean upgrade_bool;\n    private boolean first_time_enter;\n    private boolean label_boolean;\n    private Label label;\n    private float height;\n    private float fixed_width;\n    private float fixed_height;\n    private Boat someBoat;\n    private Texture someTexture;\n    private Sprite someSprite;\n    private TextButton sell;\n    private boolean sell_bool;\n    private int save;\n\n\n    public Manager(SpriteBatch batch,Player player)\n    {\n\n        already_displayed=false;\n        upgrade_bool = false;\n        label_boolean=false;\n        first_time_enter=true;\n        counter1=0;\n        counter2=0;\n        counter3=0;\n        counter4=0;\n        counter5=0;\n        counter6=0;\n        counter7=0;\n        counter8=0;\n        counter9=0;\n        scroll1_bool=false;\n        scroll2_bool=false;\n        sell_bool = false;\n        your_boats_bool=false;\n        boat1_bool=false;\n        boat2_bool=false;\n        boat3_bool=false;\n        boat4_bool=false;\n        boat5_bool=false;\n        boat6_bool=false;\n        boat7_bool=false;\n        boat8_bool=false;\n        boat9_bool=false;\n        buy_bool = false;\n        boat_stats_bool=false;\n        this.playerObject=player;\n        this.bool=true;\n        this.batch=batch;\n        stage = new Stage(new ScreenViewport(),batch);\n        skin = new Skin(Gdx.files.internal(\"uiskin.json\"));\n        someBoat  = playerObject.getPossibleBoats().get(2);\n        someSprite =  new Sprite(someBoat.getSideBoat());\n        fixed_width = someSprite.getWidth();\n        fixed_height = someSprite.getHeight();\n        Gdx.input.setInputProcessor(stage);\n\n        // TEST BOAT !\n\n        testBoat = playerObject.getPossibleBoats().get(0);\n        // Gdx.graphics.setVSync(false);\n\n        this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n        this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n        this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n        this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n        this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n        this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n        this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n        this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n        this.player_stats = new Label(\"PLAYER STATS:\",skin);\n        this.money = new Label(\"Current Balance:\"+\" \"+playerObject.money,skin);\n        this.boats_owned = new Label(\"Boats Owned:\"+ \" \"+playerObject.numberOfBoatsOwned(),skin);\n\n\n\n        container = new Table();\n        stage.addActor(container);\n        container.setFillParent(true);\n\n        //Uprages Buttons implementation:\n        upgrade = new TextButton(\"Upgrade\",skin);\n\n        upgrade.setHeight(Gdx.graphics.getHeight()/4);\n        upgrade.setWidth(Gdx.graphics.getWidth()/6);\n        upgrade.setPosition(Gdx.graphics.getWidth()/6,0);\n\n\n\n\n\n        this.buy = new TextButton(\"Buy\"+System.getProperty(\"line.separator\")+\"boat\",skin);\n\n        this.buy.setHeight(Gdx.graphics.getHeight()/4);\n        this.buy.setWidth(Gdx.graphics.getWidth()/6);\n        this.buy.setPosition(Gdx.graphics.getWidth()/6,0);\n        buy.getLabel().setFontScale(Gdx.graphics.getDensity()*0.3f,Gdx.graphics.getDensity()*0.3f);\n\n        this.sell = new TextButton(\"sell\"+System.getProperty(\"line.separator\")+\"boat\",skin);\n\n        this.sell.setHeight(Gdx.graphics.getHeight()/6);\n        this.sell.setWidth(Gdx.graphics.getWidth()/6);\n        this.sell.setPosition(0,Gdx.graphics.getHeight()/3);\n        sell.getLabel().setFontScale(Gdx.graphics.getDensity()*0.3f,Gdx.graphics.getDensity()*0.3f);\n\n        this.back = new TextButton(\"Back\",skin);\n        this.back.setHeight(Gdx.graphics.getHeight()/4);\n        this.back.setWidth(Gdx.graphics.getWidth()/6);\n        back.getLabel().setFontScale(Gdx.graphics.getDensity()*0.3f,Gdx.graphics.getDensity()*0.3f);\n        this.back.setPosition(0,0);\n        this.back.setColor(Color.FIREBRICK);\n        this.stage.addActor(back);\n\n        //this.back\n        table = new Table(skin);\n        table.getSkin().getFont(\"default-font\").getData().setScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n        table.align(Align.right|Align.top);\n        table.setPosition(0,container.getHeight());\n        this.list_of_boats = new List(skin);\n        this.list_of_boats.setItems(new String[] {\"apollo\", \"echo\", \"frejus\", \"helena\", \"jester\", \"luna\", \"aria\",\"nicas\", \"titanic\"});\n        list_of_boats.setPosition(0,Gdx.graphics.getHeight());\n        final Texture texture = new Texture(Gdx.files.internal(\"sideTexture.png\"));\n\n\n        this.list = new List(skin);\n        this.list.setItems(new String[] {});\n\n        your_boats =  new TextButton(\"YOUR BOATS\" + System.getProperty(\"line.separator\") + \"menu\",skin);\n        buy_boats =  new TextButton(\"BUY BOATS\"  + System.getProperty(\"line.separator\") + \"menu\" ,skin);\n        your_boats.getLabel().setFontScale(Gdx.graphics.getDensity()*0.3f,Gdx.graphics.getDensity()*0.3f);\n        buy_boats.getLabel().setFontScale(Gdx.graphics.getDensity()*0.3f,Gdx.graphics.getDensity()*0.3f);\n\n\n\n\n        scroll = new ScrollPane(table, skin);\n\n        table.add(your_boats).width(stage.getWidth()/5).height(stage.getHeight()/2);\n        table.row();\n        //table.add(list).row();\n        table.add(buy_boats).width(stage.getWidth()/5).height(stage.getHeight()/2);\n\n        this.buy_boats.addListener(new ClickListener(){\n            @Override\n            public void clicked(InputEvent event, float x, float y)\n            {\n                boat1_bool = false;\n                boat2_bool = false;\n                boat3_bool = false;\n                boat4_bool = false;\n                boat5_bool = false;\n                boat6_bool = false;\n                boat7_bool = false;\n                boat8_bool = false;\n                boat9_bool = false;\n                if(label_boolean)\n                {\n                    label.remove();\n                    label_boolean=false;\n                }\n                if(your_boats_bool && playerObject.getBoats().size()>0)\n                {\n                    boat_stats.remove();\n                    your_actor.remove();\n                    name.remove();\n                    speed.remove();\n                    capacity.remove();\n                    distanceLimit.remove();\n                    maintenanceCost.remove();\n                    vulnerability.remove();\n                 //   price.remove();\n                }\n                your_boats_bool=false;\n                if(scroll2_bool)\n                {\n                    scroll2.remove();\n                    scroll2_bool=false;\n                }\n\n                if(sell_bool)\n                {\n                    sell.remove();\n                    sell_bool = false;\n                }\n\n                if(upgrade_bool && playerObject.getBoats().size()>0)\n                {\n                    upgrade.remove();\n                    upgrade_bool=false;\n                }\n                if(first_time_enter) {\n                    your_boats.remove();\n                    buy_boats.remove();\n                    first_time_enter=false;\n                }\n                else\n                {\n                    buy_boats.remove();\n                }\n                Table table = new Table(skin);\n                table.getSkin().getFont(\"default-font\").getData().setScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n                table.align(Align.right|Align.top);\n                table.setPosition(0,container.getHeight());\n\n                scroll1 = new ScrollPane(table, skin);\n                Label label = new Label(\"Buy Boats\" + System.getProperty(\"line.separator\") + \"Menu\",skin);\n                label.setFontScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n                table.add(label).row();\n                label.setAlignment(Align.center);\n\n                table.add(list_of_boats);\n\n                your_boats.setHeight(Gdx.graphics.getHeight()/4);\n                your_boats.setWidth(Gdx.graphics.getWidth()/6);\n                your_boats.setPosition(Gdx.graphics.getWidth()/1.67f,0);\n                stage.addActor(your_boats);\n                stage.addActor(buy);\n                buy_bool=true;\n\n                scroll1.setScrollingDisabled(true,false);\n                container.add(scroll1).fill();\n                scroll1_bool = true;\n                boat_stats_bool = true;\n            }\n        });\n\n\n        this.your_boats.addListener(new ClickListener(){\n            @Override\n            public void clicked(InputEvent event, float x, float y)\n            {\n                your_boats_bool=true;\n                boatArrayList = new ArrayList<Boat>();\n                boatArrayList = playerObject.getBoats();\n                if(playerObject.getBoats().size()>0)\n                {\n                    stage.addActor(sell);\n                    sell_bool = true;\n                }\n                array = new ArrayList<String>();\n                for(Boat b: boatArrayList)\n                {\n                    array.add(b.getLabel());\n                }\n                list.setItems(array.toArray());\n                if(scroll1_bool)\n                {\n                    scroll1.remove();\n                    scroll1_bool=false;\n                }\n                if(buy_bool)\n                {\n                    buy.remove();\n                    buy_bool=false;\n                }\n                if(boat_stats_bool)\n                {\n                    boat_stats.remove();\n                    actor.remove();\n                    name.remove();\n                    speed.remove();\n                    capacity.remove();\n                    distanceLimit.remove();\n                    maintenanceCost.remove();\n                    vulnerability.remove();\n                    price.remove();\n                    boat_stats_bool=false;\n                    bool = true;\n                }\n                if(first_time_enter) {\n                    your_boats.remove();\n                    buy_boats.remove();\n                    first_time_enter=false;\n                }\n                else\n                {\n                    your_boats.remove();\n                }\n                Table table = new Table(skin);\n                table.getSkin().getFont(\"default-font\").getData().setScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n                table.align(Align.right|Align.top);\n                table.setPosition(0,container.getHeight());\n\n                scroll2 = new ScrollPane(table, skin);\n                scroll2.setScrollingDisabled(true,false);\n                Label label = new Label(\"Your Boats\" + System.getProperty(\"line.separator\") + \"Menu\",skin);\n                label.setFontScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n                table.add(label).row();\n                label.setAlignment(Align.center);\n                table.add(list);\n\n\n                buy_boats.setHeight(Gdx.graphics.getHeight()/4);\n                buy_boats.setWidth(Gdx.graphics.getWidth()/6);\n                buy_boats.setPosition(Gdx.graphics.getWidth()/1.77f,0);\n                stage.addActor(buy_boats);\n                if(playerObject.getBoats().size()>0)\n                {\n                    var =  list.getSelected().toString();\n                    boatArrayList = playerObject.getBoats();\n                    for(Boat b: boatArrayList)\n                    {\n                        if(var.equals(b.getLabel()))\n                        {\n                            your_boat = b;\n                            break;\n                        }\n                    }\n                    if(!(your_boat.counter_upgrage>=3)) {\n                        stage.addActor(upgrade);\n                        upgrade_bool = true;\n                    }\n//                    else\n//                    {\n//\n//                            label = new Label(\"fully upgraded\", skin);\n//                            label.setPosition(Gdx.graphics.getWidth() / 6, 0);\n//                            label.setFontScale(0.4f * Gdx.graphics.getDensity(), 0.4f * Gdx.graphics.getDensity());\n//                            stage.addActor(label);\n//                            label_boolean = true;\n//                    }\n\n                }\n                container.add(scroll2).fill();\n                scroll2_bool=true;\n            }\n        });\n\n\n       // table.add(list_of_boats);\n\n\n        container.add(scroll).expand().fill().colspan(4);\n        var =  list_of_boats.getSelected().toString();\n        boat = new Sprite(testBoat.getSideBoat()).getTexture();\n        region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n        actor = new Image(region);\n\n        this.buy.addListener(new ClickListener(){\n            @Override\n            public void clicked(InputEvent event, float x, float y)\n            {\n                if(playerObject.money>=testBoat.getPrice()) {\n\n                    if(testBoat.getLabel().equals(\"apollo\"))\n                    {\n                        counter1+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter1,1));\n                    }\n                    else if (testBoat.getLabel().equals(\"echo\"))\n                    {\n                        counter2+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter2,2));\n                    }\n                    else if (testBoat.getLabel().equals(\"frejus\"))\n                    {\n                        counter3+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter3,3));\n                    }\n                    else if (testBoat.getLabel().equals(\"helena\"))\n                    {\n                        counter4+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter4,4));\n                    }\n                    else if (testBoat.getLabel().equals(\"jester\"))\n                    {\n                        counter5+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter5,5));\n                    }\n                    else if (testBoat.getLabel().equals(\"luna\"))\n                    {\n                        counter6+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter6,6));\n                    }\n                    else if (testBoat.getLabel().equals(\"aria\"))\n                    {\n                        counter7+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter7,7));\n                    }\n                    else if (testBoat.getLabel().equals(\"nicas\"))\n                    {\n                        counter8+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter8,8));\n                    }\n                    else if (testBoat.getLabel().equals(\"titanic\"))\n                    {\n                        counter9+=1;\n                        playerObject.addBoat(testBoat.copyBoat(counter9,9));\n                    }\n\n                    playerObject.money-=testBoat.getPrice();\n\n                    money.setText(\"Current Balance:\"+\" \"+playerObject.money);\n                    boats_owned.setText(\"Boats Owned:\"+ \" \"+playerObject.numberOfBoatsOwned());\n\n                }\n                else {\n                    dialog = new Dialog(\"insufficient\" + System.getProperty(\"line.separator\") + \"funds\",skin);\n                    dialog.getTitleLabel().setFontScale(Gdx.graphics.getDensity()*0.35f);\n                    dialog.pad(stage.getHeight()/11);\n                    dialog.getTitleLabel().setAlignment(Align.center);\n                    dialog.show(stage);\n                    Timer.schedule(new Timer.Task(){\n                        @Override\n                        public void run()\n                        {\n                            dialog.hide();\n                        }\n\n                    },2);\n\n                }\n\n                }\n               // stage.addActor(upgrade2);\n               // stage.addActor(upgrade3);\n        });\n\n        upgrade.addListener(new ClickListener() {\n            @Override\n            public void clicked(InputEvent event, float x, float y) {\n                var =  list.getSelected().toString();\n                boatArrayList = playerObject.getBoats();\n                for(Boat b: boatArrayList)\n                {\n                    if(var.equals(b.getLabel()))\n                    {\n                        your_boat = b;\n                        break;\n                    }\n                }\n                upgrade_stats = new Upgrade(your_boat.price/10,your_boat.getCapacity()+your_boat.capacity/100*10, your_boat.getSpeed()+your_boat.getSpeed()/100*10);\n                if(playerObject.money>=upgrade_stats.getPrice())\n                {\n                    your_boat.counter_upgrage+=1;\n                    your_boat.price+=upgrade_stats.getPrice()/2;\n                    your_boat.capacity=upgrade_stats.getCapacity();\n                    your_boat.speed = upgrade_stats.getSpeed();\n                    playerObject.money-=upgrade_stats.getPrice();\n                    money.setText(\"Current Balance:\"+\" \"+playerObject.money);\n                    boats_owned.setText(\"Boats Owned:\"+ \" \"+playerObject.numberOfBoatsOwned());\n                }\n                else {\n                    dialog = new Dialog(\"insufficient\" + System.getProperty(\"line.separator\") + \"funds\",skin);\n                    dialog.getTitleLabel().setFontScale(Gdx.graphics.getDensity()*0.35f);\n                    dialog.pad(stage.getHeight()/11);\n                    dialog.getTitleLabel().setAlignment(Align.center);\n                    dialog.show(stage);\n                    Timer.schedule(new Timer.Task(){\n                        @Override\n                        public void run()\n                        {\n                            dialog.hide();\n                        }\n\n                    },2);\n\n                }\n\n\n            }\n        });\n\n        sell.addListener(new ClickListener() {\n            @Override\n            public void clicked(InputEvent event, float x, float y) {\n                var = list.getSelected().toString();\n                boatArrayList = playerObject.getBoats();\n                if (playerObject.getBoats().size() > 0) {\n                    for (Boat b : boatArrayList) {\n                        if (var.equals(b.getLabel())) {\n                            your_boat = b;\n                            break;\n                        }\n                    }\n\n                    boatArrayList = new ArrayList<Boat>();\n                    playerObject.money += your_boat.getPrice()-your_boat.getPrice()/100*20;\n                    if(your_boat.type_boat == 1)\n                    {\n                        counter1-=1;\n                    }\n                    else if (your_boat.type_boat == 2)\n                    {\n                        counter2-=1;\n                    }\n                    else if (your_boat.type_boat == 3)\n                    {\n                        counter3-=1;\n                    }\n                    else if (your_boat.type_boat == 4)\n                    {\n                        counter4-=1;\n\n                    }\n                    else if (your_boat.type_boat == 5)\n                    {\n                        counter5-=1;\n                    }\n                    else if (your_boat.type_boat == 6)\n                    {\n                        counter6-=1;\n\n                    }\n                    else if (your_boat.type_boat == 7)\n                    {\n                        counter7-=1;\n\n                    }\n                    else if (your_boat.type_boat == 8)\n                    {\n                        counter8-=1;\n                    }\n                    else if (your_boat.type_boat == 9)\n                    {\n                        counter9-=1;\n                    }\n                    playerObject.removeBoat(your_boat);\n                    boatArrayList = playerObject.getBoats();\n                    array = new ArrayList<String>();\n                    for (Boat b : boatArrayList) {\n                        array.add(b.getLabel());\n                    }\n                    Table table = new Table(skin);\n                    table.getSkin().getFont(\"default-font\").getData().setScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n                    table.align(Align.right|Align.top);\n                    table.setPosition(0,container.getHeight());\n\n                    scroll2.remove();\n\n                    scroll2 = new ScrollPane(table, skin);\n                    Label label1 = new Label(\"Your Boats\" + System.getProperty(\"line.separator\") + \"Menu\",skin);\n                    label1.setFontScale(0.6f*Gdx.graphics.getDensity(),0.6f*Gdx.graphics.getDensity());\n                    table.add(label1).row();\n                    label1.setAlignment(Align.center);\n                    table.add(list);\n                    list.setItems(array.toArray());\n                    container.add(scroll2).fill();\n                    scroll2_bool=true;\n                    money.setText(\"Current Balance:\" + \" \" + playerObject.money);\n                    boats_owned.setText(\"Boats Owned:\" + \" \" + playerObject.numberOfBoatsOwned());\n                    if(playerObject.getBoats().size()==0)\n                    {\n                        sell.remove();\n                        if(upgrade_bool) {\n                            upgrade.remove();\n                            upgrade_bool = false;\n                        }\n                        if(label_boolean)\n                        {\n                            label.remove();\n                        }\n                        sell_bool = false;\n                        boat_stats.remove();\n                        your_actor.remove();\n                        name.remove();\n                        speed.remove();\n                        capacity.remove();\n                        distanceLimit.remove();\n                        maintenanceCost.remove();\n                        vulnerability.remove();\n\n                    }\n                }\n            }\n        });\n\n\n\n\n        this.player_stats.setFontScale(0.333f*Gdx.graphics.getDensity(),0.333f*Gdx.graphics.getDensity());\n        this.money.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n        this.boats_owned.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n\n        this.player_stats.setPosition(Gdx.graphics.getWidth()*40/100,\n                stage.getHeight()-player_stats.getHeight());\n\n        this.money.setPosition(Gdx.graphics.getWidth()*37/100,\n                Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100);\n        this.boats_owned.setPosition(Gdx.graphics.getWidth()*37/100,\n                Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*2);\n\n\n        this.stage.addActor(this.player_stats);\n        this.stage.addActor(this.boats_owned);\n        this.stage.addActor(this.money);\n\n        upgrade.getLabel().setFontScale(Gdx.graphics.getDensity()*0.3f,Gdx.graphics.getDensity()*0.3f);\n\n\n        // YOUR BOATS BUTTON\n//        this.batch = new SpriteBatch();\n//        this.background = new Texture(\"background_manager.png\");\n//        this.splash = new Sprite(background);\n//        this.splash.setSize(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n//        this.skin = new Skin(Gdx.files.internal(\"uiskin.json\"));\n\n        //this.black = new BitmapFont(Gdx.files.internal(\"font_manager/blackfont.fnt\"), false)\n\n//\n//        this.stage = new Stage();\n//       Gdx.input.setInputProcessor(stage);\n//        atlas = new TextureAtlas(\"uiatlas.pack\");\n//        skin = new Skin(Gdx.files.internal(\"uiskin.json\"),atlas);\n//\n//        this.table = new Table();\n//\n//        this.verticalGroup = new VerticalGroup();\n//        this.verticalGroup.setWidth(stage.getWidth());\n//        this.verticalGroup.align(Align.right|Align.top);\n//        this.verticalGroup.setPosition(0, Gdx.graphics.getHeight());\n//        this.verticalGroup.debug();\n\n//        this.list_of_boats = new List(skin);\n//        this.list_of_boats.setItems(new String[] {\"Fascinosa\", \"Titanic\", \"Simon\", \"Alejandro\", \"GianMARKET\", \"PEROZA\", \"ILIJA\",\"Fascinosa\", \"Titanic\", \"Simon\",\"Fascinosa\", \"Titanic\", \"Simon\", \"Alejandro\", \"GianMARKET\", \"PEROZA\", \"ILIJA\",\"Fascinosa\", \"Titanic\", \"Simon\"});\n        //this.scrollPane = new ScrollPane(list_of_boats,skin);\n\n\n\n        //this.verticalGroup.addActor(list_of_boats);\n//        this.scrollPane = new ScrollPane(list_of_boats,skin);\n//\n//        this.table.setWidth(stage.getWidth());\n//        this.table.align(Align.right| Align.top);\n//        this.table.setPosition(0,Gdx.graphics.getHeight()/2);\n//        this.table.debug();\n//        this.table.setFillParent(true);\n//        this.table.add(scrollPane);\n\n\n\n//\n//        list_of_boats = new List(skin);\n//        list_of_boats.setItems(new String[] {\"Fascinosa\", \"Titanic\", \"Simon\", \"Alejandro\", \"GianMARKET\", \"PEROZA\", \"ILIJA\",\"Fascinosa\", \"Titanic\", \"Simon\", \"Alejandro\", \"GianMARKET\", \"PEROZA\", \"ILIJA\"});\n//\n//        play = new TextButton(\"PLAY\", skin);\n//        play.pad(15);\n//\n//        back = new TextButton(\"BACK\", skin);\n//        back.pad(10);\n//\n//\n//        scrollPane = new ScrollPane(list_of_boats,skin);\n//        table.add(\"MY BOATS\");\n\n//\n//        table = new Table(skin);\n//        table.setWidth(stage.getWidth());\n//        table.align(Align.left|Align.top);\n//        table.setPosition(0, Gdx.graphics.getHeight());\n//        table.add(\"My Boats\");\n//\n//        stage.addActor(table);\n\n//        table_atrributes=new Table();\n//        table_atrributes.setWidth(stage.getWidth());\n//        table_atrributes.align(Align.right|Align.top);\n//        table_atrributes.setPosition(0, Gdx.graphics.getHeight());\n\n\n//        my_boats = new Table();\n//        my_boats.setBounds(0,0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\n//        my_boats.debug();\n//        my_boats.add(\"My Boats\");\n\n\n//\n//        list_of_boats = new List(skin);\n//        list_of_boats.setItems(new String[] {\"Fascinosa\", \"Titanic\", \"Simon\", \"Alejandro\", \"GianMARKET\", \"PEROZA\", \"ILIJA\",\"Fascinosa\", \"Titanic\", \"Simon\", \"Alejandro\", \"GianMARKET\", \"PEROZA\", \"ILIJA\"});\n//        scrollPane = new ScrollPane(list_of_boats,skin);\n//        scrollPane.setWidth(200f);\n//        scrollPane.setHeight(stage.getHeight()/1.3f);\n\n\n\n\n//        startButton = new TextButton(\"Buy new boats\",skin, \"default\");\n//        quitButton = new TextButton(\"Your boats\", skin, \"default\");\n//        playerObject=new Player();\n//        String text=\"Current Balance:\";\n//        text+=playerObject.money;\n\n        //my_boats.add(text);\n\n       // table_atrributes.add(my_boats);\n\n//        startButton.getSkin().getFont(\"default-font\").getData().setScale(1.2f,1.2f);\n//        table.padTop(30);\n//        table.add(startButton).padBottom(50).width(250f).height(50f);\n//        table.row();\n//        table.add(quitButton).width(250f).height(50f).row();\n\n\n\n\n\n\n\n        //stage.addActor(my_boats);\n       // stage.addActor(table);\n\n       // this.batch = new SpriteBatch();\n        //sprite = new Sprite(new Texture(Gdx.files.internal(\"background.png\")));\n        //sprite.setSize(Gdx.graphics.getWidth(),Gdx.graphics.getHeight());\n\n\n\n        //final TextButton button = new TextButton(\"Buy a new boat\",skin, \"default\");\n        //button.setWidth(300);\n        //button.setHeight(400);\n        //button.getSkin().getFont(\"default-font\").getData().setScale(2f,2f);\n//\n//\n//        final Dialog dialog = new Dialog (\"Click Message\", skin);\n//        button.addListener(new ClickListener(){\n//            @Override\n//            public void clicked(InputEvent event, float x, float y)\n//            {\n//                dialog.show(stage);\n//                Timer.schedule(new Timer.Task(){\n//                    @Override\n//                    public void run()\n//                    {\n//                        dialog.hide();\n//                    }\n//\n//                },5);\n//\n//            }\n//        });\n          //stage.addActor(button);\n//        stage.addActor(button);\n        //BitmapFont font=new BitmapFont();\n        //this.label=new Label(\"money\",new LabelStyle(font, new Color().RED));\n        //this.table=new Table(skin);\n        //table.add(label);\n\n//        boat_attributes=new Table();\n//        boat_attributes.setWidth(stage.getWidth());\n//        boat_attributes.align(Align.left|Align.center);\n//        boat_attributes.setPosition(0,Gdx.graphics.getHeight()/2);\n//\n//\n//        attributes=new Label(\"NAME: Fascinosa\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        attributes=new Label(\"SPEED: 14KNOTS\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        attributes=new Label(\"CAPACITY: 1400PAX\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        attributes=new Label(\"MAINTENANCE: 10$/KM\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        boat_attributes.debug();\n\n//        this.stage.addActor(boat_attributes);\n//        this.stage.addActor(table);\n\n//        Gdx.input.setInputProcessor(stage);\n\n        //this.batch=batch;\n        //this.background=new Texture(\"background.png\");\n//        this.playerObject= new Player();\n\n//        cam = new OrthographicCamera();\n//        cam.setToOrtho(false,720*w/h,720);\n//        cam.update();\n//        //this.window= new Actor();\n//        BitmapFont font=new BitmapFont();\n//        font.getData().setScale((float) 10, (float) 10);\n\n    }\n\n    @Override\n    public void renderGameObject(){\n\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n        Gdx.input.setInputProcessor(stage);\n        stage.act(Gdx.graphics.getDeltaTime());\n\n        stage.draw();\n\n//        batch.begin();\n//        splash.draw(batch);\n//        batch.end();\n\n        //batch.begin();\n       // sprite.draw(batch);\n        //batch.end();\n//        boat_attributes=new Table();\n//        boat_attributes.setWidth(stage.getWidth());\n//        boat_attributes.align(Align.left|Align.center);\n//        boat_attributes.setPosition(0,Gdx.graphics.getHeight()/2);\n//\n//\n//\n//\n//        attributes=new Label(\"NAME: Fascinosa\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        attributes=new Label(\"SPEED: 14KNOTS\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        attributes=new Label(\"CAPACITY: 1400PAX\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n//        boat_attributes.row();\n//        attributes=new Label(\"MAINTENANCE: 10$/KM\",skin);\n//        boat_attributes.add(attributes).padBottom(10);\n\n\n\n       // stage.addActor(boat_attributes);\n//\n\n\n//        batch.begin();\n//\n//        batch.draw(background, 0, 0,(float) Gdx.graphics.getWidth() , (float) Gdx.graphics.getHeight() );\n//\n//\n//        batch.end();\n\n\n\n    }\n\n    @Override\n    public void update(float dt) {\n        playerObject.rmBoat();\n        playerObject.updateDamage();\n        var =  list_of_boats.getSelected().toString();\n\n        if(var.equals(\"apollo\") && !boat1_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n\n            testBoat = playerObject.getPossibleBoats().get(0);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity());\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity());\n\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = true;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = false;\n\n        }\n        else if(var.equals(\"echo\") && !boat2_bool)\n        {\n            System.out.println(\"I enter\");\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(1);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity());\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity());\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = true;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = false;\n        }\n        else if(var.equals(\"frejus\") && !boat3_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(2);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity());\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity());\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = true;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = false;\n\n        }\n        else if(var.equals(\"helena\") && !boat4_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(3);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*1.4f*Gdx.graphics.getDensity());\n            actor.setWidth(fixed_width*1.2f*Gdx.graphics.getDensity());\n\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = true;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = false;\n        }\n        else if(var.equals(\"jester\") && !boat5_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(4);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.1f);\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.1f);\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = true;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = false;\n\n        }\n        else if(var.equals(\"luna\") && !boat6_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(5);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.1f);\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.1f);\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = true;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = false;\n        }\n        else if(var.equals(\"aria\") && !boat7_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(6);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.1f);\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.1f);\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = true;\n            boat8_bool = false;\n            boat9_bool = false;\n        }\n        else if(var.equals(\"nicas\") && !boat8_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(7);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity());\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity());\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = true;\n            boat9_bool = false;\n        }\n        else if(var.equals(\"titanic\") && !boat9_bool)\n        {\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n                boat_stats_bool=false;\n                bool = true;\n            }\n            testBoat = playerObject.getPossibleBoats().get(8);\n\n            boat = new Sprite(testBoat.getSideBoat()).getTexture();\n            region = new TextureRegion(boat,boat.getWidth(),boat.getHeight());\n            actor = new Image(region);\n\n            actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.7f);\n            actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.3f);\n\n            this.name = new Label(\"Name:\"+\" \"+testBoat.getLabel(),skin);\n            this.price = new Label(\"Price:\"+\" \"+testBoat.getPrice(),skin);\n            this.capacity = new Label(\"Capacity:\"+\" \"+ testBoat.getCapacity(),skin);\n            this.speed = new Label(\"Speed:\"+\" \"+ testBoat.getSpeed(),skin);\n            this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ testBoat.getDistanceLimit(),skin);\n            this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ testBoat.getMaintenanceCost(),skin);\n            this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)testBoat.getVulnerability(),skin);\n            this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n            boat1_bool = false;\n            boat2_bool = false;\n            boat3_bool = false;\n            boat4_bool = false;\n            boat5_bool = false;\n            boat6_bool = false;\n            boat7_bool = false;\n            boat8_bool = false;\n            boat9_bool = true;\n        }\n        if ((var.equals(\"apollo\") || var.equals(\"echo\") || var.equals(\"frejus\") || var.equals(\"helena\") || var.equals(\"jester\") ||\n                var.equals(\"luna\") || var.equals(\"aria\") || var.equals(\"nicas\") || var.equals(\"titanic\")) && bool && scroll1_bool) {\n\n            bool = false;\n            boat_stats_bool=true;\n            this.actor.setScale(Gdx.graphics.getDensity()*0.5f,Gdx.graphics.getDensity()*0.5f);\n            if(var.equals(\"titanic\"))\n            {\n                this.actor.setPosition(Gdx.graphics.getWidth()/2 - actor.getWidth(),\n                        Gdx.graphics.getHeight()/2 - actor.getHeight()/1.4f);\n            }\n            else {\n                this.actor.setPosition(Gdx.graphics.getWidth() / 2 - actor.getWidth(),\n                        Gdx.graphics.getHeight() / 2 - actor.getHeight());\n            }\n\n\n\n\n            this.name.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.boat_stats.setFontScale(0.333f*Gdx.graphics.getDensity(),0.333f*Gdx.graphics.getDensity());\n            this.price.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.name.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.capacity.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.speed.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.maintenanceCost.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.distanceLimit.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n            this.vulnerability.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n\n            this.boat_stats.setPosition(Gdx.graphics.getWidth()*6/100,\n                    Gdx.graphics.getHeight()-boat_stats.getHeight()+Gdx.graphics.getDensity()*8);\n            this.name.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100+Gdx.graphics.getDensity()*8);\n            this.price.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*2+Gdx.graphics.getDensity()*8);\n            this.capacity.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*3+Gdx.graphics.getDensity()*8);\n            this.speed.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*4+Gdx.graphics.getDensity()*8);\n            this.distanceLimit.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*5+Gdx.graphics.getDensity()*8);\n            this.maintenanceCost.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*6+Gdx.graphics.getDensity()*8);\n            this.vulnerability.setPosition(Gdx.graphics.getWidth()*3/100,\n                    Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*7+Gdx.graphics.getDensity()*8);\n\n            this.stage.addActor(this.boat_stats);\n            this.stage.addActor(this.name);\n            this.stage.addActor(this.price);\n            this.stage.addActor(this.speed);\n            this.stage.addActor(this.capacity);\n            this.stage.addActor(this.distanceLimit);\n            this.stage.addActor(this.maintenanceCost);\n            this.stage.addActor(this.vulnerability);\n            this.stage.addActor(this.actor);\n\n        }\n        if(your_boats_bool && (playerObject.getBoats().size()>0))\n        {\n            var =  list.getSelected().toString();\n            boatArrayList = playerObject.getBoats();\n            if(boat_stats_bool)\n            {\n                boat_stats.remove();\n                actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                price.remove();\n            }\n            if(!already_displayed)\n            {\n                for(Boat b: boatArrayList)\n                {\n                    if(var.equals(b.getLabel()))\n                    {\n                        your_boat = b;\n                        your_boat_texture = b.getSideBoat().getTexture();\n                        your_region = new TextureRegion(your_boat_texture,your_boat_texture.getWidth(),your_boat_texture.getHeight());\n                        your_actor = new Image(your_region);\n                        break;\n                    }\n                }\n                this.name = new Label(\"Name:\"+\" \"+your_boat.getLabel(),skin);\n                this.price = new Label(\"Price:\"+\" \"+your_boat.getPrice(),skin);\n                this.capacity = new Label(\"Capacity:\"+\" \"+ your_boat.getCapacity(),skin);\n                this.speed = new Label(\"Speed:\"+\" \"+ your_boat.getSpeed(),skin);\n                this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ your_boat.getDistanceLimit(),skin);\n                this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ your_boat.getMaintenanceCost(),skin);\n                this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)your_boat.getVulnerability(),skin);\n                this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n                if(your_boat.type_boat == 1 || your_boat.type_boat == 2 || your_boat.type_boat == 3 || your_boat.type_boat == 8)\n                {\n                    your_actor.setHeight(fixed_height*Gdx.graphics.getDensity());\n                    your_actor.setWidth(fixed_width*Gdx.graphics.getDensity());\n                }\n                else if(your_boat.type_boat == 4)\n                {\n                    your_actor.setHeight(fixed_height*1.4f*Gdx.graphics.getDensity());\n                    your_actor.setWidth(fixed_width*1.2f*Gdx.graphics.getDensity());\n                }\n                else if(your_boat.type_boat == 5 || your_boat.type_boat == 6\n                    || your_boat.type_boat == 7)\n                {\n                    your_actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.1f);\n                    your_actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.1f);\n                }\n                else if (your_boat.type_boat == 9)\n                {\n                    your_actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.7f);\n                    your_actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.3f);\n                }\n\n                if(your_boat.type_boat == 9)\n                {\n                    this.actor.setPosition(Gdx.graphics.getWidth()/2 - actor.getWidth(),\n                            Gdx.graphics.getHeight()/2 - actor.getHeight()/1.4f);\n                }\n                else {\n                    this.actor.setPosition(Gdx.graphics.getWidth() / 2 - actor.getWidth(),\n                            Gdx.graphics.getHeight() / 2 - actor.getHeight());\n                }\n\n                this.your_actor.setScale(Gdx.graphics.getDensity()*0.5f,Gdx.graphics.getDensity()*0.5f);\n\n\n\n\n                this.name.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.boat_stats.setFontScale(0.333f*Gdx.graphics.getDensity(),0.333f*Gdx.graphics.getDensity());\n                this.price.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.name.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.capacity.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.speed.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.maintenanceCost.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.distanceLimit.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.vulnerability.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n\n                this.boat_stats.setPosition(Gdx.graphics.getWidth()*6/100,\n                        Gdx.graphics.getHeight()-boat_stats.getHeight()+Gdx.graphics.getDensity()*8);\n                this.name.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100+Gdx.graphics.getDensity()*8);\n                this.capacity.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*2+Gdx.graphics.getDensity()*8);\n                this.speed.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*3+Gdx.graphics.getDensity()*8);\n                this.distanceLimit.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*4+Gdx.graphics.getDensity()*8);\n                this.maintenanceCost.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*5+Gdx.graphics.getDensity()*8);\n                this.vulnerability.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*6+Gdx.graphics.getDensity()*8);\n\n                this.stage.addActor(this.boat_stats);\n                this.stage.addActor(this.name);\n              //  this.stage.addActor(this.price);\n                this.stage.addActor(this.speed);\n                this.stage.addActor(this.capacity);\n                this.stage.addActor(this.distanceLimit);\n                this.stage.addActor(this.maintenanceCost);\n                this.stage.addActor(this.vulnerability);\n                this.stage.addActor(this.your_actor);\n                already_displayed=true;\n            }\n            else\n            {\n                boat_stats.remove();\n                your_actor.remove();\n                name.remove();\n                speed.remove();\n                capacity.remove();\n                distanceLimit.remove();\n                maintenanceCost.remove();\n                vulnerability.remove();\n                //price.remove();\n\n                var =  list.getSelected().toString();\n                boatArrayList = playerObject.getBoats();\n\n\n                    for(Boat b: boatArrayList)\n                    {\n                        if(var.equals(b.getLabel()))\n                        {\n                            your_boat = b;\n                            your_boat_texture = b.getSideBoat().getTexture();\n                            your_region = new TextureRegion(your_boat_texture,your_boat_texture.getWidth(),your_boat_texture.getHeight());\n                            your_actor = new Image(your_region);\n                            break;\n                        }\n                    }\n                this.name = new Label(\"Name:\"+\" \"+your_boat.getLabel(),skin);\n                this.price = new Label(\"Price:\"+\" \"+your_boat.getPrice(),skin);\n                this.capacity = new Label(\"Capacity:\"+\" \"+ your_boat.getCapacity(),skin);\n                this.speed = new Label(\"Speed:\"+\" \"+ your_boat.getSpeed(),skin);\n                this.distanceLimit = new Label(\"Distance Limit:\"+ \" \"+ your_boat.getDistanceLimit(),skin);\n                this.maintenanceCost = new Label(\"Maintenance:\"+ \" \"+ your_boat.getMaintenanceCost(),skin);\n                this.vulnerability = new Label(\"Vulnerability:\"+ \" \"+ (int)your_boat.getVulnerability(),skin);\n                this.boat_stats = new Label(\"BOAT STATS:\",skin);\n\n                if(your_boat.type_boat == 1 || your_boat.type_boat == 2 || your_boat.type_boat == 3 || your_boat.type_boat == 8)\n                {\n                    your_actor.setHeight(fixed_height*Gdx.graphics.getDensity());\n                    your_actor.setWidth(fixed_width*Gdx.graphics.getDensity());\n                }\n                else if(your_boat.type_boat == 4)\n                {\n                    your_actor.setHeight(fixed_height*1.4f*Gdx.graphics.getDensity());\n                    your_actor.setWidth(fixed_width*1.2f*Gdx.graphics.getDensity());\n                }\n                else if(your_boat.type_boat == 5 || your_boat.type_boat == 6\n                        || your_boat.type_boat == 7)\n                {\n                    your_actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.1f);\n                    your_actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.1f);\n                }\n                else if (your_boat.type_boat == 9)\n                {\n                    your_actor.setHeight(fixed_height*Gdx.graphics.getDensity()*1.7f);\n                    your_actor.setWidth(fixed_width*Gdx.graphics.getDensity()*1.3f);\n                }\n\n                if(your_boat.type_boat == 9)\n                {\n                    this.your_actor.setPosition(Gdx.graphics.getWidth()/2 - your_actor.getWidth(),\n                            Gdx.graphics.getHeight()/2 - your_actor.getHeight()/1.4f);\n                }\n                else {\n                    this.your_actor.setPosition(Gdx.graphics.getWidth() / 2 - your_actor.getWidth(),\n                            Gdx.graphics.getHeight() / 2 - your_actor.getHeight());\n                }\n\n                this.your_actor.setScale(Gdx.graphics.getDensity()*0.5f,Gdx.graphics.getDensity()*0.5f);\n\n\n\n\n                this.name.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.boat_stats.setFontScale(0.333f*Gdx.graphics.getDensity(),0.333f*Gdx.graphics.getDensity());\n                this.price.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.name.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.capacity.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.speed.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.maintenanceCost.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.distanceLimit.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n                this.vulnerability.setFontScale(0.3f*Gdx.graphics.getDensity(),0.3f*Gdx.graphics.getDensity());\n\n                this.boat_stats.setPosition(Gdx.graphics.getWidth()*6/100,\n                        Gdx.graphics.getHeight()-boat_stats.getHeight()+Gdx.graphics.getDensity()*8);\n                this.name.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100+Gdx.graphics.getDensity()*8);\n                this.capacity.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*2+Gdx.graphics.getDensity()*8);\n                this.speed.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*3+Gdx.graphics.getDensity()*8);\n                this.distanceLimit.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*4+Gdx.graphics.getDensity()*8);\n                this.maintenanceCost.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*5+Gdx.graphics.getDensity()*8);\n                this.vulnerability.setPosition(Gdx.graphics.getWidth()*3/100,\n                        Gdx.graphics.getHeight()-name.getHeight()-Gdx.graphics.getHeight()*5/100*6+Gdx.graphics.getDensity()*8);\n\n                this.stage.addActor(this.boat_stats);\n                this.stage.addActor(this.name);\n                   // this.stage.addActor(this.price);\n                this.stage.addActor(this.speed);\n                this.stage.addActor(this.capacity);\n                this.stage.addActor(this.distanceLimit);\n                this.stage.addActor(this.maintenanceCost);\n                this.stage.addActor(this.vulnerability);\n                this.stage.addActor(this.your_actor);\n\n            }\n            if(sell_bool)\n            {\n                sell.setText(\"sell boat\" + System.getProperty(\"line.separator\") +\"for:\"+ (your_boat.getPrice()-your_boat.getPrice()/100*20));\n\n            }\n            if(your_boat.counter_upgrage<3)\n            {\n                upgrade.setText(\"upgrade\"+ (your_boat.counter_upgrage+1) + System.getProperty(\"line.separator\")+\n                                \"price:\" + ((int) your_boat.price/10 + System.getProperty(\"line.separator\")) +\n                                \"capacity:\"+ ((float)((your_boat.getCapacity()+(your_boat.getCapacity()/100*10))/1000f))+\"k\"+ System.getProperty(\"line.separator\") +\n                                \"speed:\"+ ((int)(your_boat.getSpeed()+(your_boat.getSpeed()/100*10))));\n\n            }\n            if(your_boat.counter_upgrage>=3)\n            {\n                if(!label_boolean) {\n                    upgrade.remove();\n                    label = new Label(\"fully upgraded\", skin);\n                    label.setPosition(Gdx.graphics.getWidth() / 6, 0);\n                    label.setFontScale(0.4f * Gdx.graphics.getDensity(), 0.4f * Gdx.graphics.getDensity());\n                    stage.addActor(label);\n                    label_boolean = true;\n                }\n            }\n            else\n            {\n                if(label_boolean)\n                {\n                    label.remove();\n                    upgrade_stats = new Upgrade(your_boat.price/10,your_boat.getCapacity()+your_boat.getCapacity()/100*10, your_boat.getSpeed()+your_boat.getSpeed()/100*10);\n                    stage.addActor(upgrade);\n                    label_boolean=false;\n                }\n            }\n\n    }\n\n    }\n\n    public int nextState(){\n\n        if(back.isPressed() && Gdx.input.justTouched()){\n            back.toggle();\n\n            return 0;\n        }\n        return 2;\n    }\n\n    @Override\n    public void inputHandler() {\n    }\n    public void removeStage(){\n        stage.dispose();\n    }\n    }\n",		"parent" : "GameState",		"relations" : [			"Button",			"Player",			"Menu",			"Map",			"Manager",			"Buy",			"Boat",			"Upgrade",			"GameState"		],		"name" : "Manager",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\n/**\n * Created by alexandercamenzind on 31/05/16.\n */\npublic class BoatSaver {\n\n    public String label;\n    public int boatVal;\n    public int upgradeCount;\n    public double speed;\n    public int capacity;\n\n    public BoatSaver(){\n    }\n    public BoatSaver(Boat b){\n        capacity=b.getCapacity();\n        label = b.getLabel();\n        boatVal=b.type_boat;\n        upgradeCount=b.counter_upgrage;\n        speed=b.getSpeed();\n\n    }\n\n}\n",		"name" : "BoatSaver",		"relations" : [			"BoatSaver",			"Boat"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.managerUpgrade;\n\n/**\n * Created by ilijagjorgjiev on 5/27/16.\n */\npublic class Buy {\n    private int price;\n\n    public Buy(int price)\n    {\n        this.price = price;\n    }\n\n    public int getPrice(){ return price;}\n}\n",		"name" : "Buy",		"relations" : [			"Buy",			"Upgrade"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.graphics.glutils.ShapeRenderer;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.maps.objects.PolygonMapObject;\nimport com.badlogic.gdx.math.Polygon;\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\n\nimport java.util.ArrayList;\n\n/**\n * Created by alexandercamenzind on 17/05/16.\n */\npublic class Boat {\n    public int capacity;\n    public double speed;\n    private double distanceLimit;\n    private double maintenanceCost;\n    private double vulnerability;\n    private final Sprite topBoat;\n    private final Sprite sideBoat;\n    private  Sprite sideBoatMirrored;\n    private double distFromOrigin;\n    private Port origin;\n    private Path currentPath;\n    private OrthographicCamera cam;\n    private SpriteBatch batch;\n    private ShapeRenderer shapeRenderer;\n    private boolean isVisible;\n    private int WORLD_WIDTH;\n    private String label;\n    public int price;\n    private float x;\n    private float y;\n    private Line currentLine;\n    private int lineCount;\n    private float localDistance;\n    private float totalDistance;\n    private boolean traveling;\n    private MapObjects landPolygons;\n\n    public int counter_upgrage;\n\n    private int moneyEarned;\n    public int type_boat;\n\n\n    //int crewMembers?\n\n\n\n    public Boat(int price, int capacity, double speed, double\n                distanceLimit, double maintenanceCost,\n                Sprite topBoat, Sprite sideBoat,\n                SpriteBatch batch, OrthographicCamera cam, ShapeRenderer shapeRenderer, int WORLD_WIDTH,\n                MapObjects landPolygons, String label, int type_boat){\n\n        this.counter_upgrage=0;\n        this.price = price;\n        this.capacity = capacity;\n        this.speed = speed;\n        this.distanceLimit = distanceLimit;\n        this.maintenanceCost = maintenanceCost;\n        this.sideBoat = sideBoat;\n\n        float ratio = sideBoat.getWidth() / sideBoat.getHeight();\n        this.sideBoat.setSize(150,150/ratio);\n\n        this.topBoat = topBoat;\n        this.vulnerability = (maintenanceCost*distanceLimit)/speed;\n        this.WORLD_WIDTH = WORLD_WIDTH;\n        this.isVisible = false;\n\n        this.lineCount = 0;\n\n        this.cam = cam;\n        this.shapeRenderer = shapeRenderer;\n        this.batch=batch;\n        this.traveling = false;\n        this.landPolygons = landPolygons;\n        this.currentPath = new Path(shapeRenderer,cam, WORLD_WIDTH, this.landPolygons);\n        this.label = label;\n\n        sideBoatMirrored=new Sprite(sideBoat.getTexture());\n        sideBoatMirrored.setSize(150,150/ratio);\n        sideBoatMirrored.setFlip(true,false);\n        totalDistance=0;\n        moneyEarned=0;\n        this.type_boat = type_boat;\n\n\n    }\n\n    public void changeOrigin(Port port){\n        origin = port;\n    }\n\n    public void moveBoat(){\n        if(distFromOrigin <= distanceLimit){\n            distFromOrigin = distFromOrigin + speed;\n        }\n    }\n\n    //upgrade Methods\n    public void upgradeCapacity(int upgrade){\n        capacity = capacity * upgrade;\n        maintenanceCost = maintenanceCost * upgrade;\n    }\n    public void upgradeVulnerability(double upgrade){\n        vulnerability = vulnerability * upgrade;\n        maintenanceCost = maintenanceCost * upgrade;\n    }\n\n    public void drawBoatOnMap(){\n        if(isVisible) {\n            if(currentLine.getDirection().x>0){\n                sideBoat.draw(batch);\n                sideBoat.setX(sideBoat.getX() + WORLD_WIDTH/2);\n                sideBoat.draw(batch);\n                sideBoat.setX(sideBoat.getX() - WORLD_WIDTH/2);\n            }\n            else {\n                sideBoatMirrored.draw(batch);\n                sideBoatMirrored.setX(sideBoat.getX() + WORLD_WIDTH / 2);\n                sideBoatMirrored.draw(batch);\n                sideBoatMirrored.setX(sideBoat.getX() - WORLD_WIDTH / 2);\n            }\n        }\n    }\n\n    public void updateBoat(float dt){\n        if(traveling){\n            Vector2 direction = currentLine.getDirection();\n            double dx= direction.x * speed *dt;\n            double dy= direction.y * speed *dt;\n            localDistance+= Math.sqrt(dx*dx+dy*dy);\n            totalDistance+= Math.sqrt(dx*dx+dy*dy);\n            x+= dx;\n            y+= dy;\n            if(lineCount>currentPath.getPositions().size()-2){\n                if(localDistance>currentLine.getLength()){\n                    traveling=false;\n                    int airDistance=currentPath.distanceFromTo;\n                    moneyEarned = airDistance*capacity - (int)totalDistance;\n                    currentPath = new Path(shapeRenderer,cam, WORLD_WIDTH, this.landPolygons);\n                    isVisible=false;\n                    lineCount=0;\n                    localDistance=0;\n                    totalDistance=0;\n                }\n\n\n            }\n            else if(localDistance>currentLine.getLength()){\n                lineCount+=1;\n                currentLine=currentPath.getPositions().get(lineCount);\n                localDistance=0;\n                x=currentLine.getStart().x;\n                y= currentLine.getStart().y;\n                //double time = currentLine.getLength() / speed;\n            }\n\n        }\n\n        sideBoat.setPosition(x-sideBoat.getWidth()/2,y-sideBoat.getHeight()/2);\n        sideBoatMirrored.setPosition(sideBoat.getX(),sideBoat.getY());\n\n\n    }\n    public void startBoat(){\n        if(! currentPath.isEmpty()) {\n            traveling = true;\n            lineCount+=1;\n            currentLine = currentPath.getPositions().get(lineCount);\n            x = currentLine.getStart().x;\n            y = currentLine.getStart().y;\n        }\n    }\n\n\n\n    public Boat copyBoat(int counter, int type_boat){\n        return new Boat(price, capacity,  speed, distanceLimit,  maintenanceCost,\n         new Sprite(topBoat.getTexture()), new Sprite(sideBoat.getTexture()), batch,  cam,  shapeRenderer, WORLD_WIDTH,\n       landPolygons, label+counter, type_boat);\n    }\n\n    public int updateMoney(){\n        int ret= moneyEarned;\n        moneyEarned=0;\n        return ret;\n    }\n\n    public void setVisible(boolean b){\n        isVisible = b;\n    }\n    public boolean isTraveling(){return traveling;}\n    public void setLabel(String s){\n        this.label=s;\n    }\n\n\n    // various getter Methods\n    public Path getCurrentPath() {\n        return currentPath;\n    }\n\n    public int getCapacity() {\n        return capacity;\n    }\n\n    public double getDistanceLimit() {\n        return distanceLimit;\n    }\n\n    public double getSpeed() {\n        return speed;\n    }\n\n    public double getMaintenanceCost() {\n        return maintenanceCost;\n    }\n\n    public Sprite getSideBoat() {\n        return sideBoat;\n    }\n\n    public Sprite getTopBoat() {\n        return topBoat;\n    }\n\n    public double getVulnerability() {\n        return vulnerability;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public int getPrice(){ return price;}\n\n    public float getX(){\n        return x;\n    }\n    public float getY(){\n        return y;\n    }\n    public void setVulnerability(int damage){\n        vulnerability = vulnerability - damage;\n    }\n    public int getCounter_upgrage(){ return counter_upgrage;}\n}\n",		"name" : "Boat",		"relations" : [			"Line",			"Button",			"Path",			"Map",			"Boat",			"Port"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\n\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\n\n/**\n * Created by simonreding on 25/05/16.\n */\npublic class TxtButton extends TextButton{\n    int i;\n    public TxtButton(String text, Skin skin,int i){\n        super(text,skin);\n        this.i = i;\n    }\n    public void setIndex(int i){\n        this.i = i;\n    }\n    public int getIndex(){return i;}\n\n}\n",		"parent" : "TextButton{",		"relations" : [			"Button",			"TxtButton"		],		"name" : "TxtButton",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.managerUpgrade;\n\nimport com.badlogic.gdx.graphics.g2d.Sprite;\n\nimport ch.inf.usi.pf2.project.gameStates.Manager;\n\n/**\n * Created by ilijagjorgjiev on 5/27/16.\n */\npublic class Upgrade {\n\n    private int price;\n    private int capacity;\n    private double speed;\n    private double distanceLimit;\n    private double maintenanceCost;\n    private double vulnerability;\n\n    public Upgrade(int price, int capacity, double speed)\n    {\n        this.price = price;\n        this.capacity = capacity;\n        this.speed = speed;\n\n    }\n\n\n    public double getDistanceLimit() {\n        return distanceLimit;\n    }\n\n    public double getSpeed() {\n        return speed;\n    }\n\n    public double getMaintenanceCost() {\n        return maintenanceCost;\n    }\n\n    public double getVulnerability() {\n        return vulnerability;\n    }\n\n    public int getPrice(){ return price;}\n\n    public int getCapacity(){ return capacity;}\n\n\n}\n",		"name" : "Upgrade",		"relations" : [			"Manager",			"Upgrade"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.gameStates;\n\n/**\n * Created by alexandercamenzind on 27/04/16.\n */\npublic abstract class GameState {\n\n    public void renderGameObject(){\n    }\n\n    public void update(float dt){\n    }\n\n    public void inputHandler(){\n    }\n\n    public abstract int nextState();\n    public void removeStage(){\n    }\n\n}\n",		"name" : "GameState",		"relations" : [			"GameState"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.math.Rectangle;\nimport com.badlogic.gdx.math.Vector2;\n\nimport java.util.Random;\n\n/**\n * Created by simonreding on 18/05/16.\n */\npublic class Port extends Place{\n    private int x;\n    private int y;\n    private String name;\n    private Rectangle hitBox;\n    private int incoming;\n    private int outgoing;\n\n    public Port(String name, Rectangle r){\n        super((int)r.getX(),(int)r.getY(),name);\n        this.name = name;\n        this.hitBox=r;\n        this.x = (int) r.getX();// (r.getX() + r.getWidth()/2);\n        this.y = (int) r.getY();//(r.getY() +r.getHeight()/2);\n        Random rn = new Random();\n        this.incoming = rn.nextInt(500);\n        this.outgoing = rn.nextInt(500);\n\n    }//constructor\n\n\n    public String getName() {\n        return name;\n    }\n\n    public Rectangle getHitBox() {\n        return hitBox;\n    }\n\n    public int getIncoming() {\n        return incoming;\n    }\n\n    public Vector2 getCoordinates(){\n        return new Vector2(x,y);\n    }\n\n    public int getOutgoing() {\n        return outgoing;\n    }\n    public void drawPort(SpriteBatch batch,Sprite portSymbol, int WorldWidth){\n        portSymbol.setSize(hitBox.getWidth(),hitBox.getHeight());\n        portSymbol.setPosition(x,y);\n        portSymbol.draw(batch);\n        portSymbol.setPosition(x+WorldWidth/2,y);\n        portSymbol.draw(batch);\n\n    }\n\n    public int distanceBetweenPorts(Port p1, Port p2, int WorldWidth){\n        Vector2 left;\n        Vector2 right;\n        if(p1.getCoordinates().x>p2.getCoordinates().x){\n            left = p2.getCoordinates();\n            right = p1.getCoordinates();\n        }\n        else{\n            left= p1.getCoordinates();\n            right=p2.getCoordinates();\n        }\n        int val1 =(int) right.dst(left);\n        int val2 = (int) right.dst(new Vector2(left.x+WorldWidth/2,left.y));\n        System.out.println(Math.min(val1,val2));\n        return Math.min(val1,val2);\n    }\n}\n",		"parent" : "Place{",		"relations" : [			"Ports",			"Place",			"Port"		],		"name" : "Port",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.gameStates;\n\nimport com.badlogic.gdx.*;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.scenes.scene2d.InputEvent;\nimport com.badlogic.gdx.scenes.scene2d.Stage;\nimport com.badlogic.gdx.scenes.scene2d.ui.Container;\nimport com.badlogic.gdx.scenes.scene2d.ui.Label;\nimport com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.Table;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\nimport com.badlogic.gdx.scenes.scene2d.utils.ClickListener;\nimport com.badlogic.gdx.utils.Align;\nimport com.badlogic.gdx.utils.viewport.ScreenViewport;\n\nimport ch.inf.usi.pf2.project.mapObjects.Place;\nimport ch.inf.usi.pf2.project.mapObjects.Player;\n\n/**\n * Created by simonreding on 01/06/16.\n */\npublic class Pause extends GameState{\n    Label pause;\n    Label instructions;\n    Label instructionContent;\n    Container container;\n    Table table;\n    Stage stage;\n    Player player;\n    SpriteBatch batch;\n    Skin skin;\n    TextButton reset;\n    ScrollPane scrollPane;\n    TextButton back;\n    Sprite background;\n    private boolean resetGame;\n\n\n    public Pause(SpriteBatch batch, Player player){\n        this.batch = batch;\n        this.player = player;\n        this.skin = new Skin(Gdx.files.internal(\"uiskin.json\"));\n        stage = new Stage(new ScreenViewport(),batch);\n        this.resetGame=false;\n\n        pause = new Label(\"Game Paused\",skin);\n        instructions = new Label(\"How to play:\",skin);\n        instructions.setFontScale(Gdx.graphics.getWidth()*1.3f/1810f,Gdx.graphics.getHeight()*1.3f/1080f);\n        instructions.setColor(1f,1f,1f,1f);\n        instructionContent = new Label(\"Map: Drag the map left or right to see different \" +\n                \"parts of the world. Buy a boat in the manager (bottom left) and start \" +\n                \"drawing routes by selecting a port. A window will show up asking you to select \" +\n                \"a boat. Confirm selection and start drawing to a different port.\" +\n                \"\\n\\nIn the news you can find out about disasters along the route. Careful: Disasters may \" +\n                \"harm your boat so stay away from the regions mentioned in the news.\\n\\n\" +\n                \"Manager: here you can buy new boat or upgrade existing ones.\" +\n                \"\\n\\n\\n Credits:\" +\n                \"\\nAlexander C: Java, Database\\n\" +\n                \"Andrea P: Database, Interface\\n\" +\n                \"Ilija G: Java\\n\" +\n                \"Gianmarco P: Artwork\\n\" +\n                \"Simon R: Java,Interface,Idea\\n\\n\" +\n                \"An HCI Project under guidance of Omar J.\",skin);\n        instructionContent.setColor(1f,1f,1f,1f);\n        instructionContent.setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        reset = new TextButton(\"Reset Game\", skin);\n        reset.pad(Gdx.graphics.getHeight()/20);\n        reset.addListener(new ClickListener() {\n            @Override\n            public void clicked(InputEvent event, float x, float y) {\n                resetGame=true;\n            }\n        });\n\n        back = new TextButton(\"Back\", skin);\n        back.pad(Gdx.graphics.getHeight()/20);\n        instructionContent.setWrap(true);\n        container = new Container(instructionContent);\n        container.maxWidth(Gdx.graphics.getWidth()/2);\n        container.padTop(Gdx.graphics.getHeight()/40);\n\n        //container.padRight(Gdx.graphics.getHeight()/40);\n        scrollPane = new ScrollPane(container);\n        container.fillX();\n        reset.setColor(1f,1f,1f,0.7f);\n        back.setColor(1f,1f,1f,0.7f);\n        table = new Table();\n        table.align(Align.center);\n        table.setWidth(Gdx.graphics.getWidth());\n        table.setHeight(Gdx.graphics.getHeight());\n        //table.add(back);\n        table.row();\n        table.add(instructions).align(Align.center);\n        table.row();\n        table.add(scrollPane).align(Align.left).width(Gdx.graphics.getWidth()/2).height(Gdx.graphics.getHeight()/2);\n        table.row().height(Gdx.graphics.getHeight()/10);\n        table.add();\n        table.row();\n        table.add(reset);\n        //table.debug();\n        Table tbl = new Table();\n        tbl.setWidth(Gdx.graphics.getWidth());\n        tbl.setHeight(Gdx.graphics.getHeight());\n        tbl.align(Align.topLeft);\n        tbl.add(back);\n        tbl.add().width(Gdx.graphics.getWidth()-back.getPrefWidth()-pause.getPrefWidth());\n        tbl.add(pause).align(Align.topRight);\n\n        stage.addActor(table);\n        stage.addActor(tbl);\n        background = new Sprite(new Texture(Gdx.files.internal(\"backgroundTexture.png\")),\n                Gdx.graphics.getWidth(),Gdx.graphics.getHeight());\n        background.setColor(0.4f,0.2f,0.2f,1f);\n    }\n    public void Update(float dt){\n        stage.draw();\n\n    }\n    public void renderGameObject(){\n\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n        Gdx.input.setInputProcessor(stage);\n        batch.begin();\n        background.draw(batch);\n        batch.end();\n        stage.draw();\n    }\n    public void inputHandler(){\n        stage.act(Gdx.graphics.getDeltaTime());\n    }\n    public int nextState(){\n        if(back.isPressed() && Gdx.input.justTouched()){\n            return 0;\n        }else{\n        return 3;}\n    }\n    public boolean shouldReset(){\n        return resetGame;\n    }\n    public void removeStage(){\n        stage.dispose();\n    }\n}\n",		"parent" : "GameState{",		"relations" : [			"Button",			"Place",			"Player",			"Map",			"Manager",			"Buy",			"GameState",			"Pause",			"Disaster"		],		"name" : "Pause",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\nimport java.util.Random;\n/**\n * Created by simonreding on 29/05/16.\n * Remark: This class should in fact be called ocean since it only represent one but it is not.\n */\npublic class Oceans extends Place{\n\n\n    private final int x;\n    private final int y;\n    private final String name;\n    private final int radius;\n    public Oceans(int x, int y,int radius, String name){\n        super(x,y,name);\n        Random rn = new Random();\n        int displ = rn.nextInt(radius) - (radius/2) -1;\n        this.x = x + displ;\n        displ = rn.nextInt(radius) - (radius/2) -1;\n        this.y = y + displ;\n        this.name = name;\n        this.radius = radius;\n    }\n\n\n\n\n    public int getY() {\n        return y;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getRadius() {\n        return radius;\n    }\n}\n",		"parent" : "Place{",		"relations" : [			"Place",			"Oceans"		],		"name" : "Oceans",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.ApplicationListener;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.InputMultiplexer;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.Sprite;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.maps.MapObject;\nimport com.badlogic.gdx.maps.MapObjects;\nimport com.badlogic.gdx.maps.tiled.TiledMap;\nimport com.badlogic.gdx.maps.tiled.TmxMapLoader;\nimport com.badlogic.gdx.scenes.scene2d.ui.*;\nimport com.badlogic.gdx.scenes.scene2d.Stage;\nimport com.badlogic.gdx.scenes.scene2d.ui.Button;\nimport com.badlogic.gdx.utils.Align;\nimport com.badlogic.gdx.utils.viewport.ScreenViewport;\nimport java.util.ArrayList;\nimport java.util.Random;\n\nimport ch.inf.usi.pf2.project.gameStates.GameState;\n\n\n/**\n * Created by simonreding on 23/05/16.\n */\n\n\npublic class News extends GameState {\n\n    private ArrayList<Article> articles;\n    private SpriteBatch spriteBatch;\n    private int numberOfArticles;\n    private ScrollPane scrollPane;\n    private Table table;\n    private Container newsContent;\n    private VerticalGroup verticalGroup;\n    private TextButton esc;\n    private Stage stage;\n    private Skin skin;\n    private Label label;\n    private Table header;\n    private Sprite backgroundImage;\n    private Sprite titleImage;\n    private Sprite sideTexture;\n    private Sprite rightSideTex;\n    private ArrayList<TxtButton> txtButtons;\n    private Player player;\n\n    private int count;\n    private int index;\n\n\n\n\n    public News(SpriteBatch batch,Player player) {\n\n        //initializing basic fields\n        spriteBatch = new SpriteBatch();\n        this.player =player;\n        backgroundImage = new Sprite(new Texture(Gdx.files.internal(\"backgroundTexture.png\"))\n                ,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());\n\n        this.articles = new ArrayList<Article>();\n        txtButtons = new ArrayList<TxtButton>();\n        stage = new Stage(new ScreenViewport(),batch);\n        skin = new Skin(Gdx.files.internal(\"uiskin.json\"));\n        numberOfArticles = 0;\n\n\n        //set up of the big table that will eventually contain all scene2d objects\n        table = new Table();\n        table.setWidth(stage.getWidth());\n        table.align(Align.left | Align.top);\n        table.setPosition(0,Gdx.graphics.getHeight());\n\n        //setting up the verticalGroup and scrollPane for the news headlines on the right\n        verticalGroup = new VerticalGroup();\n        verticalGroup.fill();\n        scrollPane = new ScrollPane(verticalGroup);\n        verticalGroup.addActor(new TxtButton(\"TestButton for width\", skin,4));\n        esc = autoPad(new TxtButton(\"Back\",skin,-3),8);\n        esc.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        scrollPane.setHeight(stage.getHeight()-esc.getHeight());\n\n        //TODO:add existing articles from player(if datatbase is implemented)\n        //Adding example articles to be deleted\n        addArticles(randomArticles());\n\n\n\n        //set the initial text with some user guidance and put it in a new container to be added later\n        label = new Label(\"Select a news headline on the right to get more details\",skin);\n        label.setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n        label.setWrap(true);\n\n        newsContent = new Container(label).align(Align.topLeft);\n        newsContent.padTop(Gdx.graphics.getHeight()/40);\n        newsContent.padRight(Gdx.graphics.getHeight()/40);\n        newsContent.fillX();\n\n\n\n\n        //add the first button in the top left of the table\n        table.add(esc).align(Align.topLeft).width(esc.getPrefWidth());\n\n\n        //set the titles\n        header = new Table(skin);\n        header.align(Align.topLeft);\n        Label news = new Label(\"NEWS\",skin);\n        news.setFontScale(Gdx.graphics.getWidth()*2/1810f,Gdx.graphics.getHeight()*2/1080f);\n        header.add(news).align(Align.center);\n\n        Label headlines = new Label(\"Headlines\",skin);\n        headlines.setFontScale(Gdx.graphics.getWidth()*1.5f/1810f,Gdx.graphics.getHeight()*1.5f/1080f);\n\n\n        //add everything to the table\n        table.add(header).align(Align.center);\n        table.add(headlines).align(Align.center);\n        table.row();\n        table.add(new Table(skin));\n        table.add(newsContent).width((stage.getWidth())-verticalGroup.getPrefWidth()-(esc.getPrefWidth()))\n                .height((Gdx.graphics.getHeight()-esc.getPrefHeight()));\n        table.add(scrollPane).width(verticalGroup.getPrefWidth());\n\n        //set the pictures in the background\n        titleImage = new Sprite(new Texture(Gdx.files.internal(\"titleTexture.png\")),Gdx.graphics.getWidth(),(int)esc.getPrefHeight());\n        titleImage.setPosition(0,Gdx.graphics.getHeight()-esc.getPrefHeight());\n        sideTexture = new Sprite(new Texture(Gdx.files.internal(\"sideTexture.png\")),\n                (int)esc.getPrefWidth(),Gdx.graphics.getHeight());\n        sideTexture.setColor(0.1f,0.1f,0.1f,0.05f);\n        rightSideTex = new Sprite(new Texture(Gdx.files.internal(\"sideTexture.png\")),\n                (int)verticalGroup.getPrefWidth(),(int)Gdx.graphics.getHeight()-(int)esc.getPrefHeight());\n        rightSideTex.setPosition(Gdx.graphics.getWidth()-verticalGroup.getPrefWidth(),0);\n\n        verticalGroup.clearChildren();\n\n\n\n        //finally add the whole table to the stage\n        stage.addActor(table);\n        //setting the input Processor so stage can recieve input\n        Gdx.input.setInputProcessor(stage);\n\n        //setting count and index to zero, they are used later to check if actions should be executed\n        count = 0;\n        randomDisasters();\n\n\n    }\n    @Override\n    public void update(float dt){\n        for(Boat b : player.getBoats()) {\n            if (b != null) {\n                b.updateBoat(dt);\n            }\n        }\n    }\n\n\n    @Override\n    public void renderGameObject(){\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n        Gdx.input.setInputProcessor(stage);\n        player.rmBoat();\n        //player.newDisasters();\n        player.updateDamage();\n        if(!scrollPane.isPanning()){\n            for(TxtButton button:txtButtons){\n                if(button.isPressed()) {\n                    count++;\n                }\n\n                if (button.isPressed() == true && count > 5){\n\n                    label.setText(\n                            articles.get(button.getIndex()).getTitle() +\":\\n\\n\"+\n                            articles.get(button.getIndex()).getContent());\n                    label.layout();\n                }\n            }}else{\n            count = 0;\n        }\n\n        //table.debug();\n\n\n        stage.act(Gdx.graphics.getDeltaTime());\n        spriteBatch.begin();\n        backgroundImage.draw(spriteBatch);\n        sideTexture.draw(spriteBatch);\n        rightSideTex.draw(spriteBatch);\n        titleImage.draw(spriteBatch);\n        spriteBatch.end();\n        stage.draw();\n\n    }\n    public int nextState(){\n        if(esc.isPressed() && Gdx.input.justTouched()){\n            esc.toggle();\n\n            //System.out.println(\"return0\");\n            return 0;\n        }\n        return 1;\n    }\n\n\n\n    private void setLabel(int n){\n        this.label.setText(articles.get(n).getContent());\n    }\n\n    private void addArticles(ArrayList<Article> newA){\n        for(Article a:newA){\n            TxtButton button = a.getTextButton();\n            button.setIndex(numberOfArticles);\n            button.getLabel().setFontScale(Gdx.graphics.getWidth()/1810f,Gdx.graphics.getHeight()/1080f);\n            button = autoPad(button, 3);\n            txtButtons.add(button);\n            verticalGroup.addActor(button);\n            this.articles.add(a);\n            player.addArticles(newA);\n            numberOfArticles++;\n        }\n\n    }\n    private static TxtButton autoPad(TxtButton button,int pad){\n        float value = (Gdx.graphics.getWidth()/(2*pad))-button.getMinWidth()/2;\n        button.padRight(value);\n        button.padLeft(value);\n        button.padBottom(Gdx.graphics.getHeight()/(2*pad));\n        button.padTop(Gdx.graphics.getHeight()/(2*pad));\n        StringBuilder sb = new StringBuilder(button.getText());\n        int i = 0;\n        while ((i = sb.indexOf(\" \", i + 10)) != -1) {\n            sb.replace(i, i + 1, \"\\n\");\n        }\n        button.setText(sb.toString());\n        return button;\n    }\n    //creates an arrayList of new Buttons\n    private ArrayList<TextButton> newButtons(ArrayList<Article> articles){\n        return makeNewButtons(articles,new ArrayList<TextButton>(),0);\n    }\n\n    private ArrayList<TextButton> makeNewButtons(ArrayList<Article> articles,\n                                                 ArrayList<TextButton> buttons,\n                                                 int n){\n        if(n == articles.size()){\n            return buttons;\n        }else {\n            //Skin buttonSkin = new Skin(Gdx.files.internal(\"uiskin.json\")); //// ENTER PARAMETERS FOR SKIN!!!!!\n            TextButton newButton = new TextButton(articles.get(n).getTitle(),skin);\n            buttons.add(newButton);\n\n            return makeNewButtons(articles,buttons,n++);\n        }\n\n\n    }\n    public static ArrayList<String> portNames(){\n        ArrayList<String> portList = new ArrayList<String>();\n        TiledMap tm = new TmxMapLoader().load(\"tileWorldMap.tmx\");\n        MapObjects mo = tm.getLayers().get(\"SquarePorts\").getObjects();\n        for(MapObject o: mo){\n            portList.add(o.getName());\n        }\n        return portList;\n    }\n\n    //TODO randomize order of random articles in whole list of articles\n    private static ArrayList<Article> randomArticles(){\n\n        ArrayList<String> countries = new ArrayList<String>();\n        countries.add(\"Namibia\");\n        countries.add(\"Singapore\");\n        //countries.add(\"Lisbon\");\n        countries.add(\"the Ocean\");\n        countries.add(\"Madagascar\");\n        //countries.add(\"Los Angeles\");\n        countries.addAll(portNames());\n\n        ArrayList<String> disaster = retEvt();\n\n        return makeArticles(countries,disaster,new ArrayList<Article>(),0,0);\n    }\n    private static ArrayList<String> retEvt(){\n        Random rn = new Random();\n        ArrayList<String> disaster = new ArrayList<String>();\n        disaster.add(\"earthquake\");\n        disaster.add(\"tsunami\");\n        disaster.add(\"pirates\");\n        disaster.add(\"Something Dangerous\");\n\n        ArrayList<String> disasters = new ArrayList<String>();\n        int i =  rn.nextInt(2)+1;\n        while (i >=0 ){\n            disasters.add(disaster.get(rn.nextInt(disaster.size())));\n            i--;\n        }\n        return disasters;\n    }\n\n    //simple function that generates a list of articles given lists of\n    // strings containing names of regions and disasters\n    private static ArrayList<Article> makeArticles(ArrayList<String> regions,\n                                                   ArrayList<String> events,\n                                                   ArrayList<Article> finishedArticles, int n,\n                                                   int numberOfArticles) {\n        if(events.size() == n){\n            return finishedArticles;\n        }else{\n            Random rn = new Random();\n            String country = regions.get(rn.nextInt(regions.size()));\n            String title = events.get(n)+ \" in \" +country;\n            String text = \"The \" + events.get(n) + \" that destroyed \" + country +\" appears to \" +\n                    \" have devastating consequences to the region\";\n            finishedArticles.add(new Article(title,text,numberOfArticles));\n            n++;\n            numberOfArticles++;\n            return makeArticles(regions,events,finishedArticles,n,numberOfArticles);\n        }\n\n    }\n    public Place randomPlace(){\n        Random rn =  new Random();\n        if(rn.nextBoolean()){\n            ArrayList<Oceans> oce = getOceans();\n            return oce.get(rn.nextInt(oce.size()));\n        }else{\n            Ports prt = player.getPorts();\n            return prt.getPorts().get(rn.nextInt(prt.getPorts().size()));\n        }\n    }\n    public int randomDisasters(){\n        Random rn = new Random();\n        int numberOfDisasters = rn.nextInt(19);\n        ArrayList disasters = new ArrayList();\n        while(numberOfDisasters > -1){\n            Place place = randomPlace();\n            boolean bool = (place instanceof Oceans);\n            String event;\n            if(bool){event = ArticleMaker.seaDisaster();}else{event=ArticleMaker.seaDisaster();};\n\n            Disaster disaster = new Disaster(place.getX(),place.getY(),bool,rn.nextInt(10),event,place.getName());\n            disasters.add(disaster);\n            numberOfDisasters--;\n        }\n        addArticles(makeArticles(disasters));\n        player.addDisasters(disasters);\n        return numberOfDisasters;\n    }\n\n\n    public static ArrayList<Article> makeArticles(ArrayList<Disaster> dis){\n        ArrayList<Article> articles = new ArrayList<Article>();\n        for(Disaster disaster: dis){\n            articles.add(makeArticle(disaster));\n        }\n        return articles;\n    }\n\n    public static Article makeArticle(Disaster disaster){\n        String dis = \"\";\n        if(disaster.isType()){dis = ArticleMaker.seaDisaster();}else{dis = ArticleMaker.landDisaster();}\n\n        String region = disaster.getLocationName();\n        String title = dis + ArticleMaker.firstArticleText(disaster.getGravity()) + region;\n        String text = makeContent(region,dis,disaster.getGravity(),disaster.isType());\n\n        return new Article(title,text,0);\n\n    }\n    public static String makeContent(String place, String event, int gravity,boolean sea){\n        String cons;\n        String e = \" \";\n        if(sea){cons = returnSeaConsequences();}else{cons = returnLandConsequences();}\n        return returnReporters()+e+returnSynReport()+e+cons+\". The \"+returnAuthority()+\" in \"+place\n                +e+returnSynInvestigate()+\".\";\n    }\n\n    public static String returnAuthority(){\n        Random rn = new Random();\n        ArrayList<String> connector = new ArrayList<String>();\n        connector.add(\"military\");\n        connector.add(\"fire department\");\n        connector.add(\"police\");\n        connector.add(\"ministry for the environment\");\n        return connector.get(rn.nextInt(connector.size()));\n    }\n\n    public static String returnSeaConsequences(){\n        Random rn = new Random();\n        ArrayList<String> connector = new ArrayList<String>();\n        connector.add(\"boats sinking\");\n        connector.add(\"coastlines damaged\");\n        connector.add(\"ships missing\");\n        connector.add(\"several ships lost radio contact\");\n        connector.add(\"small islands destroyed\");\n        return connector.get(rn.nextInt(connector.size()));\n    }\n    public static String returnLandConsequences(){\n        Random rn = new Random();\n        ArrayList<String> connector = new ArrayList<String>();\n        connector.add(\"fires in the city\");\n        connector.add(\"houses collapsing\");\n        connector.add(\"people crushed by collapsing buildings\");\n        connector.add(\"trees falling\");\n        connector.add(\"heavy winds destroying property\");\n        return connector.get(rn.nextInt(connector.size()));\n    }\n    public static String returnReporters(){\n        Random rn = new Random();\n        ArrayList<String> connector = new ArrayList<String>();\n        connector.add(\"reporters\");\n        connector.add(\"the New York Times\");\n        connector.add(\"the radio\");\n        connector.add(\"a local newspaper\");\n        return connector.get(rn.nextInt(connector.size()));\n    }\n    public static String returnSynReport(){\n        Random rn = new Random();\n        ArrayList<String> connector = new ArrayList<String>();\n        connector.add(\"disclosed\");\n        connector.add(\"claims\");\n        connector.add(\"reports\");\n        connector.add(\"gave an account of the event\");\n        return connector.get(rn.nextInt(connector.size()));\n    }\n    public static String returnSynInvestigate(){\n        Random rn = new Random();\n        ArrayList<String> connector = new ArrayList<String>();\n        connector.add(\"investigating\");\n        connector.add(\"looking into the matter\");\n        connector.add(\"still clueless\");\n        connector.add(\"making enquiries\");\n        return connector.get(rn.nextInt(connector.size()));\n    }\n    public static ArrayList<Oceans> getOceans(){\n        ArrayList<Oceans> oceanses = new ArrayList<Oceans>(); //Sorry for the plural of the plural\n        oceanses.add(new Oceans(1239,300,30,\"North Atlantic Ocean\"));\n        oceanses.add(new Oceans(1235,450,30,\"South Atlantic Ocean\"));\n        oceanses.add(new Oceans(950,270,25,\"North Pacific Ocean\"));\n        oceanses.add(new Oceans(950,370,25,\"South Pacific Ocean\"));\n        oceanses.add(new Oceans(1100,600,20,\"Southern Ocean\"));\n        oceanses.add(new Oceans(546,20,10,\"Arctic Ocean\"));\n        oceanses.add(new Oceans(278,327,12,\"Indian Ocean\"));\n        return oceanses;\n    }\n    public void rmDisasters(){\n        player.removeDisasters();\n        player.removeArticle();\n    }\n\n\n\n}",		"parent" : "GameState",		"relations" : [			"ArticleMaker",			"Article",			"Ports",			"Button",			"Place",			"Player",			"Map",			"Boat",			"TxtButton",			"GameState",			"Port",			"Oceans",			"News",			"Disaster"		],		"name" : "News",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project;\n\nimport com.badlogic.gdx.ApplicationAdapter;\n//import com.badlogic.gdx.Gdx;\n//import com.badlogic.gdx.graphics.GL20;\n//import com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.Game;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.files.FileHandle;\nimport com.badlogic.gdx.graphics.g2d.Batch;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.utils.Json;\n\nimport java.util.ArrayList;\n\nimport ch.inf.usi.pf2.project.gameStates.*;\nimport ch.inf.usi.pf2.project.mapObjects.News;\nimport ch.inf.usi.pf2.project.mapObjects.Player;\n\n//this is our main class\n\npublic class BoatManager2k16 extends ApplicationAdapter {\n\tSpriteBatch batch;\n\tGameState currentState;\n\tArrayList<GameState> gameStates;\n\tint i;\n\tNativeFunctions nf;\n\tPlayer player;\n\tPause p;\n\n\tpublic BoatManager2k16(NativeFunctions nf){\n\t\tthis.nf=nf;\n\t}\n\n\n\t//the create method will be called only once, when the aplication is started\n\t@Override\n\tpublic void create () {\n\t\ti=0;\n\t\t// Sprite batch allows us to draw sprites (pictures) on the screen\n\t\tbatch = new SpriteBatch();\n\n\t\t// We split the different parts of our game in GameState and GameState has 3 extensions at the moment\n\t\t// Map, Menu, MiniGame\n\t\t// we start off with the Map at the moment -> we store a Map instance in currentState\n\n\t\tPlayer player= new Player();\n\t\tthis.player=player;\n\t\tString s = nf.getDataFromDB();\n\t\tp = new Pause(batch,player);\n\n\n\n\t\tgameStates = new ArrayList<GameState>();\n\t\tgameStates.add(new Map(batch,player));\n\t\tplayer.buildPlayerFromDb(s);\n\t\tgameStates.add(new News(batch,player));\n\t\tgameStates.add(new Manager(batch,player));\n\t\tgameStates.add(p);\n\n\t\tcurrentState = gameStates.get(0);\n\n\t\t/*\n\t\tJson json = new Json();\n\t\tSystem.out.println(json.toJson(numbers));\n\t\tSystem.out.println( Gdx.files.isLocalStorageAvailable());\n\t\tFileHandle file = Gdx.files.internal(\"db.json\");\n\t\tString text = file.readString();\n\t\tSystem.out.println(text+\"aaa\");\n\t\t//file.writeString(\"abc\",false);\n\t\t*/\n\n\t}\n\n\tpublic  void changeState(){\n\t\tint n = currentState.nextState();\n\t\tcurrentState = gameStates.get(n);\n\t}\n\n\n\t// the render method will be called every frame\n\t@Override\n\tpublic void render () {\n\n\t\t//every gameState subclass has these 3 methods.\n\n\t\t//everything that has to due with processing input should be put in the inputHandler methods\n\t\tcurrentState.inputHandler();\n\n\t\t// Gdx.graphics.getDeltaTime() returns the time it took for the last render, we need this to get\n\t\t// update positions etc. without depending on how many frames per second we get\n\t\t// -> basically we should always multiply any changes we do every frame by the render time\n\t\tcurrentState.update(Gdx.graphics.getDeltaTime());\n\n\t\tchangeState();\n\n\t\t// in the renderGameObject method we should everything, that has to do with actually displaying\n\t\t// objects, that need to be displayed, like the background or sprites\n\t\tcurrentState.renderGameObject();\n\n\t\ti++;\n\t\tif(i > 10000 && gameStates.get(1) instanceof News){\n\t\t\tint number;\n\t\t\t((News) gameStates.get(1)).randomDisasters();\n\t\t\t((News) gameStates.get(1)).rmDisasters();\n\n\t\t\tSystem.out.println(\"new news\");\n\n\t\t\ti = 0;\n\t\t}\n\n\n\t\tif(p.shouldReset()){\n\t\t\treset();\n\t\t}\n\n\t}\n\tprivate void reset(){\n\t\t//player.reset();\n\t\tnf.storeStringInDb(\"\");\n\t\tfor(GameState s : gameStates){\n\t\t\ts.removeStage();\n\t\t}\n\t\tp=new Pause(batch,player);\n\t\tPlayer player= new Player();\n\t\tthis.player=player;\n\t\tgameStates = new ArrayList<GameState>();\n\t\tgameStates.add(new Map(batch,player));\n\t\tgameStates.add(new News(batch,player));\n\t\tgameStates.add(new Manager(batch,player));\n\t\tgameStates.add(p);\n\n\t\tcurrentState = gameStates.get(0);\n\n\t\t//Gdx.input.setInputProcessor(null);\n\n\t}\n\n\t@Override\n\tpublic void dispose () {\n\t\tnf.storeStringInDb(player.buildDatabaseFromPlayer());\n\t\tsuper.dispose();\n\n\t}\n}\n",		"parent" : "ApplicationAdapter",		"relations" : [			"MiniGame",			"Player",			"Menu",			"Map",			"Manager",			"Boat",			"GameState",			"Pause",			"News",			"BoatManager2k16",			"Disaster",			"NativeFunctions"		],		"name" : "BoatManager2k16",		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\n\nimport java.util.Random;\n\n/**\n * Created by simonreding on 29/05/16.\n */\npublic class Disaster {\n    private int x;\n    private int y;\n    private boolean type;//true if in sea\n\n    private String name;\n    private String locationName;\n\n\n    //how grave the disaster is, not as is getting pulled down to earth. 10 is worst, 1 best\n    private int gravity;\n\n\n\n    public Disaster(int x,int y, boolean type, int gravity, String name, String locationName){\n        this.x = x;\n        this.y =  y;\n        this.type = type;\n        if(gravity < 10 && gravity != 0) {\n            this.gravity = gravity;\n        }else{Random rn = new Random();\n            gravity = rn.nextInt(10)+1;}\n        this.name = name;\n        this.locationName = locationName;\n    }\n\n\n\n    public Disaster(Oceans oceans){\n        this.name = oceans.getName();\n        x = oceans.getX();\n        y = oceans.getY();\n        Random rn = new Random();\n        this.gravity = rn.nextInt(10)+1;\n    }\n    public Disaster(int x,int y, String name){\n\n        this.x = x;\n        this.y =  y;\n        //this.type = checkWater(x,y);\n        Random rn = new Random();\n        this.gravity = rn.nextInt(10)+1;\n\n\n        this.name = name;\n\n\n    }\n\n\n    public int getGravity() {\n        return gravity;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public boolean isType() {\n        return type;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getLocationName() {\n        return locationName;\n    }\n}\n",		"name" : "Disaster",		"relations" : [			"Oceans",			"Disaster"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport java.util.ArrayList;\n\n/**\n * Created by alexandercamenzind on 31/05/16.\n */\npublic class SaveState {\n    public ArrayList<BoatSaver> bs;\n    public int playerMoney;\n\n    public SaveState(){\n\n    }\n\n    public SaveState(int money){\n        bs = new ArrayList<BoatSaver>();\n        playerMoney=money;\n    }\n    public void add(BoatSaver b){\n        bs.add(b);\n    }\n}\n",		"name" : "SaveState",		"relations" : [			"BoatSaver",			"Boat",			"SaveState"		],		"type" : "class"	},	{		"source" : "package ch.inf.usi.pf2.project;\n\n/**\n * Created by alexandercamenzind on 31/05/16.\n */\npublic interface NativeFunctions {\n    void storeStringInDb(String s);\n    String getDataFromDB();\n}\n",		"name" : "NativeFunctions",		"relations" : [			"NativeFunctions"		],		"type" : "interface"	},	{		"source" : "package ch.inf.usi.pf2.project.mapObjects;\n\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\n\n/**\n * Created by alexandercamenzind on 27/05/16.\n */\npublic class BoatButton extends TextButton {\n    private Boat b;\n    public BoatButton(String text, Skin skin, Boat b){\n        super(text,skin);\n        this.b = b;\n\n    }\n\n    public Boat getB() {\n        return b;\n    }\n}\n",		"parent" : "TextButton",		"relations" : [			"Button",			"Boat",			"BoatButton"		],		"name" : "BoatButton",		"type" : "class"	}]